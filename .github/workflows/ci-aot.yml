name: Publish AOTCompatibility testApp

on:
  push:
    branches: [ 'main*' ]
    paths-ignore:
    - '**.md'
  pull_request:
    branches: [ 'main*' ]
    paths-ignore:
    - '**.md'

jobs:
  aot-test:
    strategy:
      fail-fast: false
      matrix:
        # concise lists; combinations will be generated automatically
        rid: [ 'win-x64', 'win-x86', 'win-arm64', 'linux-x64', 'linux-arm', 'linux-arm64', 'osx-x64', 'osx-arm64' ]
        tfm: [ 'net9.0', 'net10.0' ]
    # map runtime identifier to the appropriate GitHub runner label
    # prefer partner ARM images where available: https://github.com/actions/partner-runner-images
    runs-on: ${{ fromJson('{"win-x64":"windows-latest","win-x86":"windows-latest","win-arm64":"windows-11-arm","linux-x64":"ubuntu-latest","linux-arm":"ubuntu-22.04-arm","linux-arm64":"ubuntu-22.04-arm","osx-x64":"macos-latest","osx-arm64":"macos-13"}')[matrix.rid] }}
    # determine dotnet SDK version from the TFM (job-level env to avoid schema ambiguity)
    env:
      DOTNET_VERSION: ${{ matrix.tfm == 'net10.0' && '10.0.x' || '9.0.x' }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # fetching all

    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: publish AOT testApp, assert static analysis warning count, and run the app
      shell: pwsh
      run: ./test-aot-compatibility.ps1 -runtimes "${{ matrix.rid }}" -frameworks "${{ matrix.tfm }}"