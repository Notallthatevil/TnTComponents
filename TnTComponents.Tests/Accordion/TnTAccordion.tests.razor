}
@using Bunit
@using TnTComponents
@using TnTComponents.Accordion
@inherits Bunit.TestContext

@code {
    public TnTAccordion_tests()
    {
        var module = JSInterop.SetupModule("./_content/TnTComponents/Accordion/TnTAccordion.razor.js");
        module.SetupVoid("onLoad", _ => true);
        module.SetupVoid("onUpdate", _ => true);
        module.SetupVoid("TnTComponents.addHidden", _ => true);
        var rippleModule = JSInterop.SetupModule("./_content/TnTComponents/Core/TnTRippleEffect.razor.js");
        rippleModule.SetupVoid("onLoad", _ => true);
        rippleModule.SetupVoid("TnTComponents.addHidden", _ => true);
        JSInterop.SetupVoid("TnTComponents.addHidden", _ => true);
        SetRendererInfo(new RendererInfo("Server", true));
    }

    [Fact]
    public void TnTAccordion_Renders_BasicAccordion()
    {
        // Arrange
        // (No setup needed)

        // Act
        var cut = Render(@<TnTAccordion><TnTAccordionChild Label="ChildLabel">Child</TnTAccordionChild></TnTAccordion>);

        // Assert
        cut.Markup.Should().Contain("Child");
        cut.Markup.Should().Contain("ChildLabel");
    }

    [Fact]
    public void TnTAccordionChild_Renders_WhenNested()
    {
        // Arrange
        // Render inside a parent accordion to avoid NullReferenceException
        var cut = Render(@<TnTAccordion><TnTAccordionChild Label="NestedLabel">Nested</TnTAccordionChild></TnTAccordion>);

        // Assert
        cut.Markup.Should().Contain("Nested");
        cut.Markup.Should().Contain("NestedLabel");
    }

    [Fact]
    public void TnTAccordion_Renders_WithCustomHeaderAndContentColors()
    {
        // Act
        var cut = RenderComponent<TnTAccordion>(parameters => parameters
            .Add(p => p.HeaderBodyColor, TnTColor.Secondary)
            .Add(p => p.HeaderTextColor, TnTColor.OnSecondary)
            .Add(p => p.ContentBodyColor, TnTColor.Tertiary)
            .Add(p => p.ContentTextColor, TnTColor.OnTertiary)
            .Add(p => p.ChildContent, builder => builder.AddContent(0, "Custom Content")));

        // Assert
        cut.Instance.HeaderBodyColor.Should().Be(TnTColor.Secondary);
        cut.Instance.HeaderTextColor.Should().Be(TnTColor.OnSecondary);
        cut.Instance.ContentBodyColor.Should().Be(TnTColor.Tertiary);
        cut.Instance.ContentTextColor.Should().Be(TnTColor.OnTertiary);
        cut.Markup.Should().Contain("Custom Content");
    }

    [Fact]
    public void TnTAccordion_LimitToOneExpanded_SetsClass()
    {
        // Act
        var cut = RenderComponent<TnTAccordion>(parameters => parameters
            .Add(p => p.LimitToOneExpanded, true)
            .Add(p => p.ChildContent, builder => builder.AddContent(0, "Accordion Content")));

        // Assert
        cut.Markup.Should().Contain("tnt-limit-one-expanded");
    }

    // ...existing code...
}
