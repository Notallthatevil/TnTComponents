@using Bunit
@using TnTComponents
@using TnTComponents.Tests.TestingUtility
@using Microsoft.AspNetCore.Components.Web
@inherits Bunit.TestContext

@code {
    public TnTImageButton_tests() {
        TestingUtility.SetupRippleEffectModule(this);
    }

    // -------------------- Rendering --------------------
    [Fact]
    public void Renders_With_Icon() {
        // Arrange
        var iconStub = new TnTIconStub("icon");
        // Act
        var cut = Render(@<TnTImageButton Icon="@iconStub">ImgBtn</TnTImageButton>);
        var button = cut.Find("button");
        var icon = cut.Find("icon");
        // Assert
        button.Should().NotBeNull();
        icon.Should().NotBeNull();
    }

    [Fact]
    public void Renders_With_Icon_Only() {
        // Arrange
        var iconStub = new TnTIconStub("icon");
        // Act
        var cut = Render(@<TnTImageButton Icon="@iconStub">NoIcon</TnTImageButton>);
        var button = cut.Find("button");
        var icon = cut.Find("icon");
        // Assert
        button.Should().NotBeNull();
        icon.Should().NotBeNull();
    }

    [Fact]
    public void Renders_Button_With_Icon_And_No_ChildContent() {
        // Arrange
        var iconStub = new TnTIconStub("icon");
        // Act
        var cut = Render(@<TnTImageButton Icon="@iconStub"></TnTImageButton>);
        var button = cut.Find("button");
        var icon = cut.Find("icon");
        // Assert
        button.Should().NotBeNull();
        icon.Should().NotBeNull();
    }

    [Fact]
    public void Renders_With_Null_Icon() {
        // Arrange & Act & Assert
        Assert.Throws<ArgumentNullException>(() => Render(@<TnTImageButton Icon="null">NoIcon</TnTImageButton>));
    }

    // -------------------- State --------------------
    [Fact]
    public void Renders_Disabled() {
        // Arrange
        var iconStub = new TnTIconStub("icon");
        // Act
        var cut = Render(@<TnTImageButton Icon="@iconStub" Disabled="true">Disabled</TnTImageButton>);
        var button = cut.Find("button");
        // Assert
        button.HasAttribute("disabled").Should().BeTrue();
    }

    [Fact]
    public void Emits_OnClick() {
        // Arrange
        var clicked = false;
        void OnClickHandler(MouseEventArgs _) => clicked = true;
        var iconStub = new TnTIconStub("icon");
        // Act
        var cut = Render(@<TnTImageButton Icon="@iconStub" OnClickCallback="@OnClickHandler">Click</TnTImageButton>);
        cut.Find("button").Click();
        // Assert
        clicked.Should().BeTrue();
    }

    // -------------------- Accessibility --------------------
    [Fact]
    public void Supports_Aria_Label() {
        // Arrange
        var iconStub = new TnTIconStub("icon");
        // Act
        var cut = Render(@<TnTImageButton Icon="@iconStub" aria-label="Accessible label">Label</TnTImageButton>);
        var button = cut.Find("button");
        // Assert
        button.GetAttribute("aria-label").Should().Be("Accessible label");
    }

    [Fact]
    public void Has_Button_Role() {
        // Arrange
        var iconStub = new TnTIconStub("icon");
        // Act
        var cut = Render(@<TnTImageButton Icon="@iconStub">Role</TnTImageButton>);
        var button = cut.Find("button");
        // Assert
        button.GetAttribute("role").Should().BeNull(); // native button, role not needed
    }

    [Fact]
    public void Can_Receive_Keyboard_Focus() {
        // Arrange
        var iconStub = new TnTIconStub("icon");
        // Act
        var cut = Render(@<TnTImageButton Icon="@iconStub">Focus</TnTImageButton>);
        var button = cut.Find("button");
        // Assert
        button.HasAttribute("tabindex").Should().BeFalse(); // native button is focusable
    }

    // -------------------- Class Attributes --------------------
    [Fact]
    public void Sets_Correct_Class_Attributes() {
        // Arrange
        var iconStub = new TnTIconStub("icon");
        // Use non-defaults to trigger more classes
        var cut = Render(@<TnTImageButton Icon="@iconStub" Appearance="ButtonAppearance.Filled" Shape="ButtonShape.Square" ImageButtonAppearance="ImageButtonAppearance.Wide" EnableRipple="true">ClassTest</TnTImageButton>);
        var button = cut.Find("button");
        var classAttr = button.GetAttribute("class");
        // Assert
        classAttr.Should().Contain("tnt-image-button");
        classAttr.Should().Contain("tnt-filled");
        classAttr.Should().Contain("tnt-button-square");
        classAttr.Should().Contain("tnt-image-button-wide");
        classAttr.Should().Contain("tnt-interactable");
        classAttr.Should().Contain("tnt-ripple");
    }

    [Fact]
    public void Sets_All_Expected_Class_Attributes() {
        // Arrange
        var iconStub = new TnTIconStub("icon");
        // Test all appearance, shape, and feature classes
        var cut = Render(@<TnTImageButton Icon="@iconStub"
            Appearance="ButtonAppearance.Elevated"
            Shape="ButtonShape.Square"
            ImageButtonAppearance="ImageButtonAppearance.Narrow"
            EnableRipple="true"
            Disabled="true"
            TintColor="TnTColor.SurfaceTint"
            OnTintColor="TnTColor.OnSurface"
        >ClassTest</TnTImageButton>);
        var button = cut.Find("button");
        var classAttr = button.GetAttribute("class");
        // Assert: positive
        classAttr.Should().Contain("tnt-image-button");
        classAttr.Should().Contain("tnt-elevated");
        classAttr.Should().Contain("tnt-filled"); // Elevated implies filled
        classAttr.Should().NotContain("tnt-outlined");
        classAttr.Should().NotContain("tnt-text");
        classAttr.Should().Contain("tnt-button-square");
        classAttr.Should().Contain("tnt-image-button-narrow");
        classAttr.Should().NotContain("tnt-image-button-round");
        classAttr.Should().NotContain("tnt-image-button-wide");
        classAttr.Should().Contain("tnt-button-tint-color");
        classAttr.Should().Contain("tnt-button-on-tint-color");
        classAttr.Should().Contain("tnt-interactable");
        classAttr.Should().Contain("tnt-ripple");
        classAttr.Should().Contain("tnt-disabled");
    }

    [Fact]
    public void Does_Not_Set_Unused_Classes_Or_Styles() {
        // Arrange
        var iconStub = new TnTIconStub("icon");
        // Use defaults (minimal classes/styles)
        var cut = Render(@<TnTImageButton Icon="@iconStub">Minimal</TnTImageButton>);
        var button = cut.Find("button");
        var classAttr = button.GetAttribute("class");
        var styleAttr = button.GetAttribute("style");
        // Assert: only base classes present
        classAttr.Should().Contain("tnt-image-button");
        classAttr.Should().Contain("tnt-image-button-round");
        classAttr.Should().Contain("tnt-interactable");
        classAttr.Should().Contain("tnt-ripple");
        classAttr.Should().Contain("tnt-filled"); // Default includes tnt-filled
        classAttr.Should().NotContain("tnt-elevated");
        classAttr.Should().NotContain("tnt-outlined");
        classAttr.Should().NotContain("tnt-text");
        classAttr.Should().NotContain("tnt-button-square");
        classAttr.Should().NotContain("tnt-image-button-wide");
        classAttr.Should().NotContain("tnt-image-button-narrow");
        classAttr.Should().NotContain("tnt-button-on-tint-color");
        classAttr.Should().NotContain("tnt-disabled");
        // Assert: style variables present only for defaults
        styleAttr.Should().Contain("--tnt-button-bg-color");
        styleAttr.Should().Contain("--tnt-button-fg-color");
        styleAttr.Should().Contain("--tnt-button-tint-color"); // Default includes tint color
        // On-tint should not be present by default
        styleAttr.Should().NotContain("--tnt-button-on-tint-color");
    }

    // -------------------- Style Attributes --------------------
    [Fact]
    public void Sets_Correct_Style_Attributes() {
        // Arrange
        var iconStub = new TnTIconStub("icon");
        var cut = Render(@<TnTImageButton Icon="@iconStub" BackgroundColor="TnTColor.Secondary" TextColor="TnTColor.OnSecondary" TintColor="TnTColor.Tertiary" OnTintColor="TnTColor.OnTertiary">StyleTest</TnTImageButton>);
        var button = cut.Find("button");
        var styleAttr = button.GetAttribute("style");
        // Assert
        styleAttr.Should().Contain("--tnt-button-bg-color");
        styleAttr.Should().Contain("--tnt-button-fg-color");
        styleAttr.Should().Contain("--tnt-button-tint-color");
        styleAttr.Should().Contain("--tnt-button-on-tint-color");
    }

    [Fact]
    public void Sets_All_Expected_Style_Attributes() {
        // Arrange
        var iconStub = new TnTIconStub("icon");
        // Set all style-related parameters
        var cut = Render(@<TnTImageButton Icon="@iconStub"
            BackgroundColor="TnTColor.Secondary"
            TextColor="TnTColor.OnSecondary"
            TintColor="TnTColor.Tertiary"
            OnTintColor="TnTColor.OnTertiary"
        >StyleTest</TnTImageButton>);
        var button = cut.Find("button");
        var styleAttr = button.GetAttribute("style");
        // Assert: all variables present
        styleAttr.Should().Contain("--tnt-button-bg-color");
        styleAttr.Should().Contain("--tnt-button-fg-color");
        styleAttr.Should().Contain("--tnt-button-tint-color");
        styleAttr.Should().Contain("--tnt-button-on-tint-color");
    }
}

