@inherits Bunit.TestContext

@code {

    public TnTButton_Tests(){
        JSInterop.SetupDefaultModule("./_content/TnTComponents/Buttons/TnTButton.razor.js");
        JSInterop.SetupDefaultModule("./_content/TnTComponents/Core/TnTRippleEffect.razor.js");
    }
    
    [Fact]
    public void TnTButton_ShouldRenderCorrectly() {
        // Arrange
        var cut = Render(@<TnTButton />);

        // Act
        var button = cut.Find("button");

        // Assert
        button.ClassList.Should().Contain("tnt-components");
    }

    [Fact]
    public void TnTButton_ShouldRenderWithOutlinedAppearance() {
        var cut = Render(@<TnTButton Appearance="ButtonAppearance.Outlined" />);
        var button = cut.Find("button");
        button.ClassList.Should().Contain("tnt-outlined");
    }

    [Fact]
    public void TnTButton_ShouldRenderWithFilledAppearance() {
        var cut = Render(@<TnTButton Appearance="ButtonAppearance.Filled" />);
        var button = cut.Find("button");
        button.ClassList.Should().Contain("tnt-filled");
    }

    [Fact]
    public void TnTButton_ShouldBeDisabled_WhenDisabledIsTrue() {
        var cut = Render(@<TnTButton Disabled="true" />);
        var button = cut.Find("button");
        button.HasAttribute("disabled").Should().BeTrue();
    }

    [Fact]
    public void TnTButton_ShouldInvokeOnClickCallback() {
        bool clicked = false;
        var cut = Render(@<TnTButton OnClickCallback="@(() => clicked = true)" />);
        var button = cut.Find("button");
        button.Click();
        clicked.Should().BeTrue();
    }

    [Fact]
    public void TnTButton_ShouldNotRenderRipple_WhenDisabled() {
        var cut = Render(@<TnTButton EnableRipple="false" />);
        cut.Markup.Should().NotContain("tnt-ripple");
    }

    [Fact]
    public void TnTButton_ShouldRenderChildContent() {
        var cut = Render(@<TnTButton>Click Me</TnTButton>);
        cut.Markup.Should().Contain("Click Me");
    }

    [Fact]
    public void TnTButton_ShouldSetButtonType() {
        var cut = Render(@<TnTButton Type="ButtonType.Submit" />);
        var button = cut.Find("button");
        button.GetAttribute("type").Should().Be("submit");
    }

    [Fact]
    public void TnTButton_ShouldStopPropagation_WhenSet() {
        var cut = Render(@<TnTButton StopPropagation="true" />);
        var button = cut.Find("button");
        // BUnit does not simulate event propagation, but we can check markup for stopPropagation
        cut.Markup.Should().Contain("blazor:onclick:stopPropagation");
    }
}