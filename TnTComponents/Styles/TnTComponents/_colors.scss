@use "sass:color";
@import "../_Variables/_colors.scss";

$color-classes: transparent, black, white, primary, surface-tint, on-primary, primary-container, on-primary-container, secondary, on-secondary, secondary-container, on-secondary-container, tertiary, on-tertiary, tertiary-container, on-tertiary-container, error, on-error, error-container, on-error-container, background, on-background, surface, on-surface, surface-variant, on-surface-variant, outline, outline-variant, shadow, scrim, inverse-surface, inverse-on-surface, inverse-primary, primary-fixed, on-primary-fixed, primary-fixed-dim, on-primary-fixed-variant, secondary-fixed, on-secondary-fixed, secondary-fixed-dim, on-secondary-fixed-variant, tertiary-fixed, on-tertiary-fixed, tertiary-fixed-dim, on-tertiary-fixed-variant, surface-dim, surface-bright, surface-container-lowest, surface-container-low, surface-container, surface-container-high, surface-container-highest, success, on-success, success-container, on-success-container, warning, on-warning, warning-container, on-warning-container, info, on-info, info-container, on-info-container;
$color-classes-no-transparent: black, white, primary, surface-tint, on-primary, primary-container, on-primary-container, secondary, on-secondary, secondary-container, on-secondary-container, tertiary, on-tertiary, tertiary-container, on-tertiary-container, error, on-error, error-container, on-error-container, background, on-background, surface, on-surface, surface-variant, on-surface-variant, outline, outline-variant, shadow, scrim, inverse-surface, inverse-on-surface, inverse-primary, primary-fixed, on-primary-fixed, primary-fixed-dim, on-primary-fixed-variant, secondary-fixed, on-secondary-fixed, secondary-fixed-dim, on-secondary-fixed-variant, tertiary-fixed, on-tertiary-fixed, tertiary-fixed-dim, on-tertiary-fixed-variant, surface-dim, surface-bright, surface-container-lowest, surface-container-low, surface-container, surface-container-high, surface-container-highest, success, on-success, success-container, on-success-container, warning, on-warning, warning-container, on-warning-container, info, on-info, info-container, on-info-container;

.tnt-disabled:not(:has(progress.tnt-components)) {
    opacity: 0.4;
}

.tnt-outlined {
    &:not(.tnt-input) {
        background-color: transparent;
        border: 1px solid $tnt-color-outline;
    }
}

@each $colorClass in $color-classes {
    .tnt-bg-color-#{$colorClass} {
        &.tnt-filled:not(:has(> .tnt-checkbox)) {
            background-color: var(--tnt-color-#{$colorClass});

            &.tnt-disabled:has(> progress.tnt-components) {
                background-color: color-mix(in srgb, var(--tnt-color-#{$colorClass}) 40%, transparent);

                & > progress.tnt-components {
                    color: var(--tnt-color-#{$colorClass});
                }
            }
        }
    }

    .tnt-fg-color-#{$colorClass} {
        color: var(--tnt-color-#{$colorClass});

        &.tnt-disabled:has(> progress.tnt-components) {
            color: color-mix(in srgb, var(--tnt-color-#{$colorClass}) 40%, transparent);

            & > progress.tnt-components {
                color: var(--tnt-color-#{$colorClass});
            }
        }
    }

    .tnt-tint-color-#{$colorClass}:not(:has(input)):not(:has(select)):not(:has(textarea)) {
        &:not(disabled):not(.tnt-disabled) {
            &:hover {
                &.tnt-filled {
                    background-color: color-mix(in srgb, var(--tnt-color-#{$colorClass}) 70%, transparent);
                }

                &:not(.tnt-filled) {
                    background-color: color-mix(in srgb, var(--tnt-color-#{$colorClass}) 10%, transparent);
                }
            }

            &:active:not(.tnt-ripple) {
                &.tnt-filled {
                    background-color: color-mix(in srgb, var(--tnt-color-#{$colorClass}) 50%, transparent);
                }

                &:not(.tnt-filled) {
                    background-color: color-mix(in srgb, var(--tnt-color-#{$colorClass}) 20%, transparent);
                }
            }

            .tnt-rippling {
                background-color: var(--tnt-color-#{$colorClass});
            }
        }
    }

    .tnt-on-tint-color-#{$colorClass}:not(:has(input)):not(:has(select)):not(:has(textarea)) {
        &:not(disabled):not(.tnt-disabled) {
            &:hover {
                &.tnt-filled {
                    color: color-mix(in srgb, var(--tnt-color-#{$colorClass}) 70%, transparent);
                }

                &:not(.tnt-filled) {
                    color: color-mix(in srgb, var(--tnt-color-#{$colorClass}) 10%, transparent);
                }
            }

            &:active:not(.tnt-ripple) {
                &.tnt-filled {
                    color: color-mix(in srgb, var(--tnt-color-#{$colorClass}) 50%, transparent);
                }

                &:not(.tnt-filled) {
                    color: color-mix(in srgb, var(--tnt-color-#{$colorClass}) 20%, transparent);
                }
            }

            .tnt-rippling {
                color: var(--tnt-color-#{$colorClass});
            }
        }
    }
}
