@using System.Globalization
@using TnTComponents.Core
@using TnTComponents.Scheduler.Infrastructure
@namespace TnTComponents
@typeparam TEventType
@inherits ScheduleViewBase<TEventType>

@if (Scheduler.IsViewSelected(this))
{
    var today = DateOnly.FromDateTime(DateTimeOffset.Now.LocalDateTime);
    <div @attributes="AdditionalAttributes" class="@ElementClass" style="@ElementStyle" id="@ElementId" title="@ElementTitle" lang="@ElementLang" @ref="Element">
        <div class="tnt-date-header">
            <div class="tnt-time-column">
            </div>
            <div class="tnt-dates">
                @foreach (var date in _visibleDates)
                {
                    <h2 class="@($"tnt-date-header-item{(date == today ? " tnt-today" : string.Empty)}")">
                        <div class="tnt-day-of-week tnt-label-small">
                            @date.ToString("ddd").ToUpper()
                        </div>
                        <div class="tnt-date tnt-headline-small">
                            @date.ToString("dd")
                        </div>
                    </h2>
                }
            </div>
        </div>
        <div class="tnt-date-content">
            <div class="tnt-time-column">
                @{
                    var startTime = TimeOnly.MinValue;
                    do
                    {
                        <div class="tnt-time-row tnt-body-small">
                            @startTime.ToString("h tt")
                        </div>
                        startTime = startTime.AddHours(1);
                    }
                    while (startTime != TimeOnly.MinValue);
                }
            </div>
            <div class="tnt-event-columns">
                @foreach (var date in _visibleDates)
                {
                    <div class="tnt-event-column">
                        @if (_events.TryGetValue(date, out var eventList))
                        {
                            @foreach (var @event in eventList)
                            {
                                var width = 90;
                                var left = 0;

                                if(@event.HeaderOverlapIndex.HasValue)
                                {
                                    width /= @event.HeaderOverlapCount!.Count;
                                    left = width * @event.HeaderOverlapIndex.Value;
                                }
                                else if(@event.OverlapCount > 0)
                                {
                                    left = @event.OverlapCount * 2;
                                    width -= @event.OverlapCount * 2;
                                }

                                var style = CssStyleBuilder.Create()
                                    .AddVariable("tnt-event-start-hour", @event.StartTime.Hour.ToString())
                                    .AddVariable("tnt-event-end-hour", @event.EndTime.Hour.ToString())
                                    .AddVariable("tnt-event-start-min", @event.StartTime.Minute.ToString())
                                    .AddVariable("tnt-event-end-min", @event.EndTime.Minute.ToString())
                                    .AddVariable("tnt-event-bg-color", @event.BackgroundColor)
                                    .AddVariable("tnt-event-fg-color", @event.ForegroundColor)
                                    .AddStyle("left", left.ToString() + "%")
                                    .AddStyle("width", width.ToString() + "%");



                                <div class="tnt-event" style="@style.Build()">
                                    <div class="tnt-event-title tnt-label-medium">
                                        @(@event.Title)
                                    </div>
                                    <div class="tnt-event-time tnt-body-small">
                                        @(TimeOnly.FromDateTime(@event.OriginalEventStart.LocalDateTime).ToString("t")) - @(TimeOnly.FromDateTime(@event.OriginalEventEnd.LocalDateTime).ToString("t"))    
                                    </div>
                                </div>
                            }
                        }

                    </div>
                }
            </div>
        </div>
    </div>
}
