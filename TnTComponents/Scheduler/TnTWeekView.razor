@using System.Globalization
@using TnTComponents.Core
@using TnTComponents.Scheduler.Infrastructure
@namespace TnTComponents
@typeparam TEventType
@inherits ScheduleViewBase<TEventType>

@if (Scheduler.IsViewSelected(this))
{
    var today = DateOnly.FromDateTime(DateTimeOffset.Now.LocalDateTime);
    <div @attributes="AdditionalAttributes" class="@ElementClass" style="@ElementStyle" id="@ElementId" title="@ElementTitle" lang="@ElementLang" @ref="Element">
        <div class="tnt-date-header">
            <div class="tnt-time-column">
            </div>
            <div class="tnt-dates">
                @foreach (var date in _visibleDates)
                {
                    <h2 class="@($"tnt-date-header-item{(date == today ? " tnt-today" : string.Empty)}")">

                        @if (HideDates)
                        {
                            <div class="tnt-day-of-week tnt-label-large">
                                @date.ToString("ddd").ToUpper()
                            </div>
                        }
                        else
                        {
                            <div class="tnt-day-of-week tnt-label-small">
                                @date.ToString("ddd").ToUpper()
                            </div>
                            <div class="tnt-date tnt-headline-small">
                                @date.ToString("dd")
                            </div>
                        }
                    </h2>
                }
            </div>
        </div>
        <div class="tnt-date-content">
            <div class="tnt-time-column">
                @{
                    var startTime = TimeOnly.MinValue;
                    do
                    {
                        <div class="tnt-time-row tnt-body-small">
                            @startTime.ToString("h tt")
                        </div>
                        startTime = startTime.AddHours(1);
                    }
                    while (startTime != TimeOnly.MinValue);
                }
            </div>
            <div class="tnt-event-columns">
                @foreach (var date in _visibleDates)
                {
                    <div class="@($"tnt-event-column{(Scheduler.EventSlotClickedCallback.HasDelegate ? " tnt-interactable" : null)}")"
                         ondragover="event.preventDefault()"
                         @ondrop="@((args => OnDropAsync(args, CalculateDateTimeOffset(args.OffsetY, date))))"
                         @onclick="@((args) => EventSlotClickedAsync(CalculateDateTimeOffset(args.OffsetY, date)))">
                        @if (_events.TryGetValue(date, out var eventList))
                        {
                            @foreach (var @event in eventList)
                            {
                                var width = 90;
                                var left = 0;

                                if (@event.HeaderOverlapIndex.HasValue)
                                {
                                    width /= @event.HeaderOverlapCount!.Count;
                                    left = width * @event.HeaderOverlapIndex.Value;
                                }
                                else if (@event.OverlapCount > 0)
                                {
                                    left = @event.OverlapCount * 2;
                                    width -= @event.OverlapCount * 2;
                                }

                                var style = CssStyleBuilder.Create()
                                .AddVariable("tnt-event-start-hour", @event.StartTime.Hour.ToString())
                                .AddVariable("tnt-event-end-hour", @event.EndTime.Hour.ToString())
                                .AddVariable("tnt-event-start-min", @event.StartTime.Minute.ToString())
                                .AddVariable("tnt-event-end-min", @event.EndTime.Minute.ToString())
                                .AddVariable("tnt-event-bg-color", @event.Event.BackgroundColor)
                                .AddVariable("tnt-event-fg-color", @event.Event.ForegroundColor)
                                .AddStyle("left", left.ToString() + "%")
                                .AddStyle("width", width.ToString() + "%");

                                var @class = CssClassBuilder.Create()
                                .AddClass("tnt-event")
                                .AddClass("tnt-interactable", Scheduler.EventClickedCallback.HasDelegate)
                                .AddClass("tnt-dragging", DraggingEvent == @event.Event)
                                .AddRipple(Scheduler.EventClickedCallback.HasDelegate)
                                .AddTintColor(Scheduler.EventClickedCallback.HasDelegate ? @event.Event.TintColor : null)
                                .AddOnTintColor(Scheduler.EventClickedCallback.HasDelegate ? @event.Event.OnTintColor : null);

                                <div class="@(@class.Build())"
                                     style="@style.Build()"
                                     draggable="@(Scheduler.AllowDraggingEvents ? "true" : "false")"
                                     ondragover="event.preventDefault()"
                                     ondrop="event.preventDefault()"
                                     @onclick="@(() => EventClickedAsync(@event.Event))"
                                     @onclick:stopPropagation="true"
                                     @ondragstart="@((args) => OnDragStartAsync(args, @event.Event))"
                                     @ondragend="OnDragEndAsync">
                                    <div class="tnt-event-title tnt-label-medium">
                                        @(@event.Event.Title)
                                    </div>
                                    @if (!HideEventDates)
                                    {
                                        <div class="tnt-event-time tnt-body-small">
                                            @(TimeOnly.FromDateTime(@event.Event.EventStart.LocalDateTime).ToString("t")) - @(TimeOnly.FromDateTime(@event.Event.EventEnd.LocalDateTime).ToString("t"))
                                        </div>
                                    }
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        </div>
    </div>
}