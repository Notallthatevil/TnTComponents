@using System.Globalization
@using BlazorCalendar
@using BlazorCalendar.Models
@using BlazorCalendar.Styles
@using TnTComponents.Scheduler.Infrastructure
@namespace TnTComponents
@typeparam TEventType
@inherits ScheduleViewBase<TEventType>

@if (Scheduler.IsViewSelected(this)) {

    DateTime FirstDateWeek = new DateTime(FirstDate.Year, FirstDate.Month, FirstDate.Day).AddDays(-(Dates.GetNumOfDay((int)FirstDate.Date.DayOfWeek) - 2));
    string[] dayNames = CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames;
    string? isHidden = Scheduler.DisplayedView == DisplayedView.Weekly ? null : "hidden-element";
    string? CSSbackground = null;
    string? taskColor = null;
    string? classPin = null;
    string? classPointer = null;
    string borderStyle = "";


    <div @attributes="AdditionalAttributes" class="@CssClass" style="@CssStyle" tntid="@Id" @ref="Element">

        @foreach (var b in GetTimeSlots().Select((time, index) => new { Time = time, Index = index + 1 })) {
            var time = b.Time;
            var rowIndex = b.Index;
            <div class="tnt-slot tnt-time-slot tnt-label-large" style="@($"--row-index:{rowIndex + 1};--column-index:1")">
                @time
            </div>

            @foreach (var a in GetVisibleDates().Select((date, columnIndex) => new { Date = date, ColumnIndex = columnIndex + 1 })) {
                var date = a.Date;
                var columnIndex = a.ColumnIndex;

                if (rowIndex == 1 /* First row */) {
                    <div class="tnt-slot tnt-column-header tnt-label-large" style="@($"--row-index:{rowIndex};--column-index:{columnIndex + 1}")">
                        @date.ToString("dddd")
                        <div>
                            @date.ToString("dd")
                        </div>
                    </div>
                }


                <div class="tnt-grid-container tnt-slot" style="@($"--row-index:{rowIndex + 1}; --column-index:{columnIndex + 1}")">
                    @{
                        var slot = new DateTime(date, time);
                        var tasks = GetTasksForSlot(slot);

                        var column = 1;
                        @foreach (var task in tasks) {
                            taskColor = Colors.GetHatching(task.FillStyle, task.Color);
                            taskColor = $"{taskColor};color:{task.ForeColor}";

                            classPin = string.IsNullOrWhiteSpace(task.Comment) ? null : " pin";
                            classPointer = " cursor-pointer";

                            <div class="@($"hour-task {classPin}{classPointer} border-start border-top border-bottom")"
                                 style="grid-column-start: @column; @taskColor"
                                 draggable="@((!Scheduler.DisableDragAndDrop).ToString())"
                                 @ondragstart="() => HandleDragStart(task.ID)"
                                 @onclick="e => ClickTaskInternal(e, task.ID, slot)">
                                @task.Code
                            </div>
                            column++;
                        }
                    }
                </div>
            }
        }


        @foreach (var c in GetVisibleDates().Select((date, index) => new { date, index })) {
            var day = new DateTime(c.date, default);
            var i = c.index;
            <div class="tnt-day-column" style="@($"--column-index: {i + 2}")">

                <div class="day-header header-name noselect" style="@HeaderStyle">
                    @day.DayOfWeek @day.ToString("dd.MM")

                </div>

                <div class="hours">
                    @{
                        CSSbackground = GetBackground(day);
                    }
                    @for (int hour = 0; hour < 24; hour++) {
                        DateTime hours = day.AddHours(hour);
                        <div class="hour day-cellule noselect"
                             ondragover="event.preventDefault();this.style.fontWeight = '600';"
                             ondragleave="this.style.fontWeight='100';"
                             @ondrop:preventDefault="true"
                             @ondrop="() => HandleDayOnDrop(hours)"
                             @onclick="e => ClickDayInternal(e, hours)"
                             style="@CSSbackground">
                            @hours.ToString("HH:mm")
                        </div>

                        @if (Scheduler.TasksList is not null) {
                            int column = 1;

                            for (var k = 0; k < Scheduler.TasksList.Length; k++) {
                                Tasks t = Scheduler.TasksList[k];


                                if (t.DateEnd > hours && t.DateStart <= hours) {
                                    column++;

                                    taskColor = Colors.GetHatching(t.FillStyle, t.Color);
                                    taskColor = $"{taskColor};color:{t.ForeColor}";

                                    classPin = string.IsNullOrWhiteSpace(t.Comment) ? null : " pin";
                                    classPointer = " cursor-pointer";

                                    <div class="@($"hour-task {classPin}{classPointer} border-start border-top border-bottom")"
                                         style="grid-column-start: @column; @taskColor"
                                         draggable="@((!Scheduler.DisableDragAndDrop).ToString())"
                                         @ondragstart="() => HandleDragStart(t.ID)"
                                         @onclick="e => ClickTaskInternal(e, t.ID, day)">
                                        @t.Code
                                    </div>

                                }
                            }
                        }

                    }
                </div>

            </div>
        }

    </div>
}
