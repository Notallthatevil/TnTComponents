@using System.Globalization
@using TnTComponents.Scheduler.Infrastructure
@namespace TnTComponents
@typeparam TEventType
@inherits ScheduleViewBase<TEventType>

@if (Scheduler.IsViewSelected(this)) {
    <div @attributes="AdditionalAttributes" class="@CssClass" style="@CssStyle" tntid="@Id" @ref="Element">

        @{
            @foreach (var (date, gridPosition) in _visibleDates) {
                <div class="tnt-slot tnt-column-header tnt-label-large@(date == DateOnly.FromDateTime(DateTimeOffset.Now.Date) ? " today" : null)" style="@gridPosition.ToCssString()">
                    @date.ToString("dddd")
                    @if (!HideDates) {
                        <div>
                            @date.ToString("dd")
                        </div>
                    }
                </div>
            }

            @foreach (var (time, timeGridPosition) in _timeSlots) {
                var show = time.Minute % 30 == 0;
                <div class="tnt-slot tnt-time-slot tnt-label-large" style="@timeGridPosition.ToCssString()">
                    @if (show) {
                        @time
                    }
                </div>

                @foreach (var (date, dateGridPosition) in _visibleDates) {
                    var gridPosition = new GridPosition() {
                            ColumnIndex = dateGridPosition.ColumnIndex,
                            RowIndex = timeGridPosition.RowIndex,
                            ColumnSpan = dateGridPosition.ColumnSpan
                        };

                    @if (IsDisabledSlot(date.DayOfWeek, time)) {
                        <div class="tnt-slot tnt-day-slot disabled@(show ? " tnt-slot-outline" : null) @(date == DateOnly.FromDateTime(DateTimeOffset.Now.Date) ? " today" : null)"
                             style="@gridPosition.ToCssString()">
                        </div>
                    }
                    else {
                        <div class="tnt-slot tnt-day-slot@(show ? " tnt-slot-outline" : null) @(date == DateOnly.FromDateTime(DateTimeOffset.Now.Date) ? " today" : null) @(TimeSlotClickedCallback.HasDelegate ? " tnt-clickable" : null)"
                             style="@gridPosition.ToCssString()"
                             ondragover="event.preventDefault();this.style.fontWeight = '600';"
                             ondragleave="this.style.fontWeight='100';"
                             @ondrop:preventDefault="true"
                             @ondrop="@(() => OnDropEvent(new DateTime(date, time)))"
                             @onclick="@(() => TimeSlotClicked(new DateTime(date, time)))">
                        </div>
                    }
                }
            }
        }
        @foreach (var (@event, position) in _events) {
            <div class="tnt-slot tnt-event tnt-label-medium"
                 style="@position.ToCssString() @($"--background-color: var(--tnt-color-{@event.BackgroundColor.ToCssClassName()}); --foreground-color: var(--tnt-color-{@event.ForegroundColor.ToCssClassName()})")"
                 draggable="@((!Scheduler.DisableDragAndDrop).ToString())"
                 @ondragstart="@(() => DragEventStart(@event))"
                 @ondragend="@DragEventEnd"
                 @onclick="@(() => EventClicked(@event))">
                @(@event.Title)
            </div>

        }
    </div>
}
