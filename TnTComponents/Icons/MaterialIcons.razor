@namespace TnTComponents

<span class="@GetClass()">@Icon.Icon</span>

@code {
    [Parameter]
    public MaterialIconSize Size { get; set; } = MaterialIconSize.Medium;

    [Parameter]
    public MaterialIconAppearance Appearance { get; set; } = MaterialIconAppearance.Default;

    [Parameter, EditorRequired]
    public MaterialIcon Icon { get; set; } = default!;

    protected override void OnInitialized() {
        base.OnInitialized();
        ArgumentNullException.ThrowIfNull(Icon, nameof(Icon));
    }


    private string GetClass() {
        var appearanceClass = "material-icons " + Appearance switch {
            MaterialIconAppearance.Outlined => "material-icons-outlined ",
            MaterialIconAppearance.TwoTone => "material-icons-two-tone ",
            MaterialIconAppearance.Round => "material-icons-round ",
            MaterialIconAppearance.Sharp => "material-icons-sharp ",
            _ => throw new InvalidOperationException($"Must provide a valid value for {nameof(Appearance)}. The value {Appearance} is invalid!")
        };
        var sizeClass = Size switch {
            MaterialIconSize.Small => "mi-small",
            MaterialIconSize.Medium => "mi-medium",
            MaterialIconSize.Large => "mi-large",
            MaterialIconSize.ExtraLarge => "mi-extra-large",
            _ => throw new InvalidOperationException($"Must provide a valid value for {nameof(Size)}. The value {Size} is invalid!")
        };

        return appearanceClass + sizeClass;
    }

}