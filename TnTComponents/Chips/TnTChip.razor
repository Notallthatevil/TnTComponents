@namespace TnTComponents
@using TnTComponents.Core
@inherits TnTComponentBase


<label class="@ElementClass" title="@ElementTitle" lang="@ElementLang" id="@ElementId" style="@ElementStyle">
    @if (StartIcon is not null) {
        @StartIcon.Render("tnt-start-icon")
    }

    <input type="checkbox"
           @attributes="AdditionalAttributes"
           name="@ElementName"
           autofocus="@AutoFocus"
           readonly="@DisableToggle"
           disabled="@Disabled"
           value="@bool.TrueString"
           checked="@BindConverter.FormatValue(Value)"
           @onchange="@((ChangeEventArgs args) => Value = (bool)args.Value!)"
           @ref="Element" />

    @if (!string.IsNullOrWhiteSpace(Label)) {
        <span class="tnt-label">
            @Label
        </span>
    }

    @if (CloseButtonClicked.HasDelegate) {
        <TnTImageButton OnClickCallback="CloseButtonClicked" Icon="@MaterialIcon.Close" BackgroundColor="TnTColor.Transparent" TextColor="@(Value? OnTintColor : TextColor)" TintColor="TintColor" OnTintColor="OnTintColor" ButtonSize="Size.XS" />
    }

    @if (EnableRipple) {
        <TnTRippleEffect />
    }
</label>
