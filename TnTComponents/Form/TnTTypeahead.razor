@using Microsoft.AspNetCore.Components.Rendering
@using TnTComponents
@using TnTComponents.Core
@namespace TnTComponents
@typeparam TItem

<div class="tnt-typeahead">
    <div class="tnt-typeahead-box">
        @if (Label is not null) {
            <TnTLabel Label="@Label">
                @((RenderFragment)RenderInputBox)
            </TnTLabel>
        }
        else {
            @((RenderFragment)RenderInputBox)
        }
        @if (_searching) {
            <TnTProgressIndicator ProgressColor="SearchProgressColor" Size="Size.Small" />
        }
    </div>
    @if (_items.Any() || (!_items.Any() && !string.IsNullOrWhiteSpace(_searchText) && !_searching)) {
        <div class="@(CssClassBuilder.Create()
                .AddClass("tnt-typeahead-content")
                .AddBorderRadius(ResultsViewBorderRadius)
                .AddElevation(ResultsViewElevation)
                .AddBackgroundColor(ResultsViewBackgroundColor)
                .AddForegroundColor(ResultsViewTextColor)
                .Build())"
             style="@(CssStyleBuilder.Create().AddVariable("container-background", $"var(--tnt-color-{ResultsViewBackgroundColor.ToCssClassName()})").Build())">

            @if (_items.Any()) {
                <ul class="tnt-typeahead-list">

                    @foreach (var item in _items) {
                        <li class="tnt-typeahead-list-item" @onclick="(() => ItemSelectedAsync(item))">
                            @if (ResultTemplate is not null) {
                                @ResultTemplate(item)
                            }
                            else {
                                <span class="tnt-corner-radius-5 tnt-body-medium">
                                    @item
                                </span>
                            }
                        </li>
                    }
                </ul>
            }
            else if (!_items.Any() && !string.IsNullOrWhiteSpace(_searchText) && !_searching) {
                <div class="tnt-typeahead-no-results">
                    No results found
                </div>
            }
        </div>
    }
</div>

@code {
    private void RenderInputBox(RenderTreeBuilder __builder) {
        <TnTInputText @bind-Value="_searchText"
                      BindOnInput="true"
                      BindAfter="SearchAsync"
                      StartIcon="StartIcon"
                      @onkeypress="KeyPressedAsync"
                      @ref="_inputTextBox" />
    }
}