@namespace TnTComponents
@using Microsoft.AspNetCore.Components.Rendering
@typeparam TInputType
@inherits TnTInputBase<TInputType>

<label class="@ElementClass" title="@ElementTitle" lang="@ElementLang" id="@ElementId" style="@ElementStyle">
	@if (StartIcon is not null) {
		@StartIcon.Render("tnt-start-icon")
	}

	@RenderInputElement

	@if (!string.IsNullOrWhiteSpace(SupportingText)) {
		<span class="tnt-supporting-text">
			@SupportingText
		</span>
	}
	@if (EditContext is not null && !DisableValidationMessage && ValueExpression is not null) {
		<ValidationMessage TValue="@TInputType" For="@ValueExpression" class="tnt-components tnt-supporting-text tnt-validation-message" style="color: var(--tnt-color-error)" />
	}

	@if (!string.IsNullOrWhiteSpace(Label)) {
		<span class="tnt-label">
			@Label
		</span>
	}

	@if (EndIcon is not null) {
		@EndIcon.Render("tnt-end-icon")
	}
</label>

@code {
	protected override void RenderInputElement(RenderTreeBuilder __builder) {
		var multiple = typeof(TInputType).IsArray || Nullable.GetUnderlyingType(typeof(TInputType))?.IsArray == true;
		EventCallback<ChangeEventArgs> changeEventCallback = multiple
			? EventCallback.Factory.Create<ChangeEventArgs>(this, SetCurrentValueAsStringArrayAsync)
			: EventCallback.Factory.Create<ChangeEventArgs>(this, OnChangeAsync);
		<select @attributes="AdditionalAttributes"
				multiple="@multiple"
				name="@ElementName"
				title="@FieldIdentifier.FieldName"
				autofocus="@AutoFocus"
				autocomplete="@AutoComplete"
				readonly="@FieldReadonly"
				disabled="@FieldDisabled"
				required="@IsRequired()"
				value="@GetValue(multiple)"
				@onchange="@changeEventCallback"
				@onblur="@(EditContext is not null ? (FocusEventArgs args) => EditContext.NotifyFieldChanged(FieldIdentifier) : (FocusEventArgs _) => { })"
				@ref="Element">
			@if (Placeholder is not null) {
				<option value="@(PlaceholderValue ?? string.Empty)" disabled="@(!AllowPlaceholderSelection)" selected="@ShouldHavePlaceholderSelected">@Placeholder</option>
			}
			else {
				<option value="@string.Empty" disabled selected></option>
			}
			@ChildContent
		</select>


	}
}