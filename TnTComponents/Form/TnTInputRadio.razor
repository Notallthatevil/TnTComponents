@namespace TnTComponents
@using TnTComponents.Core
@using TnTComponents.Interfaces
@typeparam TInputType
@inherits TnTComponentBase
@implements ITnTInteractable


<label class="@ElementClass" title="@ElementTitle" lang="@ElementLang" id="@ElementId" style="@ElementStyle" @ref="Element">
    @if (StartIcon is not null) {
        @StartIcon.Render("tnt-start-icon")
    }

    <span class="tnt-radio-button"></span>

    <input @attributes="AdditionalAttributes"
        title="@ElementTitle"
           type="radio"
           name="@_group.ElementName"
           readonly="@_readOnly"
           disabled="@_disabled"
           value="@BindConverter.FormatValue(Value?.ToString())"
           checked="@(_group.InternalCurrentValue?.Equals(Value) == true ? GetToggledTrueValue() : null)"
           @onchange="@_group.UpdateValueAsync"
           @onblur="@(_group.InternalEditContext is not null ? (FocusEventArgs args) => { _group.NotifyStateChanged(); } : (FocusEventArgs _) => { })" />


    @if (!string.IsNullOrWhiteSpace(Label)) {
    <span class="tnt-label">
        @Label
    </span>
    }

    @if (EndIcon is not null) {
        @EndIcon.Render("tnt-end-icon")
    }
</label>
