@namespace TnTComponents
@using Microsoft.AspNetCore.Components.Rendering
@using TnTComponents.Interfaces
@typeparam TInputType
@inherits InputBase<TInputType>
@implements ITnTComponentBase

<label class="@ElementClass" title="@ElementTitle" lang="@ElementLang" id="@ElementId" style="@ElementStyle">
    @if (StartIcon is not null) {
        @StartIcon.Render("tnt-start-icon")
    }

    @RenderInputElement

    @if (EditContext is not null && !DisableValidationMessage && ValueExpression is not null) {
        <ValidationMessage TValue="@TInputType" For="@ValueExpression" class="tnt-components tnt-validation-message" style="color: var(--tnt-color-error)" />
    }

    @{
#if NET9_0_OR_GREATER
    if (GetMaxLength() > 0 && RendererInfo.IsInteractive) {
    <span class="tnt-input-length">
        @(CurrentValueAsString?.Length ?? 0)/@(GetMaxLength())
    </span>
    }
#endif
    }

    @if (!string.IsNullOrWhiteSpace(Label)) {
    <span class="tnt-label">
        @Label
    </span>
    }

    @if (EndIcon is not null) {
        @EndIcon.Render("tnt-end-icon")
    }
</label>


@code {
    protected virtual void RenderInputElement(RenderTreeBuilder __builder) {
        <input type="@Type.ToInputTypeString()"
               @attributes="AdditionalAttributes"
               name="@ElementName"
               title="@FieldIdentifier.FieldName"
               autofocus="@AutoFocus"
               autocomplete="@AutoComplete"
               readonly="@FieldReadonly"
               placeholder="@(string.IsNullOrWhiteSpace(Placeholder) ? " " : Placeholder)"
               disabled="@FieldDisabled"
               required="@IsRequired()"
               minlength="@GetMinLength()"
               maxlength="@GetMaxLength()"
               min="@GetMinValue()"
               max="@GetMaxValue()"
               @bind-value="CurrentValueAsString"
               @bind-value:event="@(BindOnInput ? "oninput" : "onchange")"
               @onblur="@(EditContext is not null ? (FocusEventArgs args) => EditContext.NotifyFieldChanged(FieldIdentifier) : (FocusEventArgs _) => { })"
               @ref="Element" />

    }

}
@* 
 protected override void BuildRenderTree(RenderTreeBuilder builder) {
        builder.OpenElement(0, "label");
        builder.AddAttribute(10, "lang", ElementLang);
        builder.AddAttribute(20, "title", ElementTitle);
        builder.AddAttribute(30, "class", ElementClass);
        builder.AddAttribute(40, "id", ElementId);
        if (AdditionalAttributes?.TryGetValue("style", out var style) == true) {
            builder.AddAttribute(41, "style", style);
        }

        {
            {
                if (StartIcon is not null) {
                    builder.AddContent(50, StartIcon.Render());
                }
            }
            {
                if (Type == InputType.TextArea) {
                    builder.OpenElement(60, "textarea");
                }
                else if (Type == InputType.Select) {
                    builder.OpenElement(60, "select");
                    builder.AddAttribute(70, "multiple", typeof(TInputType).IsArray || Nullable.GetUnderlyingType(typeof(TInputType))?.IsArray == true);
                }
                else {
                    builder.OpenElement(60, "input");
                    builder.AddAttribute(70, "type", Type.ToInputTypeString());
                }
                builder.AddMultipleAttributes(80, AdditionalAttributes);
                builder.AddAttribute(90, "name", ElementName);

                if (Type == InputType.Tel) {
                    builder.AddAttribute(91, "onkeydown", "TnTComponents.enforcePhoneFormat(event)");
                    builder.AddAttribute(92, "onkeyup", "TnTComponents.formatToPhone(event)");
                }
                else if (Type == InputType.Currency) {
                    builder.AddAttribute(91, "onkeydown", "TnTComponents.enforceCurrencyFormat(event)");
                    builder.AddAttribute(92, "onkeyup", "TnTComponents.formatToCurrency(event)");
                }

                builder.AddAttribute(93, "autofocus", AutoFocus);
                if (typeof(TInputType) == typeof(bool)) {
                    builder.AddAttribute(100, "value", bool.TrueString);
                    builder.AddAttribute(110, "checked", BindConverter.FormatValue(CurrentValue));
                }
                else if (Type == InputType.Select && (typeof(TInputType).IsArray || Nullable.GetUnderlyingType(typeof(TInputType))?.IsArray == true)) {
                    builder.AddAttribute(210, "value", BindConverter.FormatValue(CurrentValue)?.ToString());
                }
                else {
                    builder.AddAttribute(100, "value", CurrentValueAsString);
                }
                builder.AddAttribute(120, "style", ElementStyle);
                builder.AddAttribute(130, "readonly", FieldReadonly);
                builder.AddAttribute(140, "placeholder", string.IsNullOrEmpty(Placeholder) ? " " : Placeholder);
                builder.AddAttribute(150, "disabled", FieldDisabled || (Type == InputType.Select && FieldReadonly));
                builder.AddAttribute(160, "required", IsRequired());
                builder.AddAttribute(170, "minlength", GetMinLength());
                builder.AddAttribute(180, "maxlength", GetMaxLength());
                builder.AddAttribute(190, "min", GetMinValue());
                builder.AddAttribute(200, "max", GetMaxValue());

                if (BindOnInput && Type != InputType.Select) {
                    builder.AddAttribute(210, "oninput", EventCallback.Factory.CreateBinder(this, value => { CurrentValue = value; BindAfter.InvokeAsync(CurrentValue); }, CurrentValue));
                }
                else {
                    if (Type == InputType.Select && (typeof(TInputType).IsArray || Nullable.GetUnderlyingType(typeof(TInputType))?.IsArray == true)) {
                        builder.AddAttribute(210, "onchange", EventCallback.Factory.CreateBinder<string?[]?>(this, SetCurrentValueAsStringArray, default));
                    }
                    else if (typeof(TInputType) == typeof(bool)) {
                        builder.AddAttribute(210, "onchange", EventCallback.Factory.CreateBinder(this, __value => { CurrentValue = __value; BindAfter.InvokeAsync(CurrentValue); }, CurrentValue));
                    }
                    else {
                        builder.AddAttribute(210, "onchange", EventCallback.Factory.CreateBinder<string?>(this, OnChangeAsync, CurrentValueAsString));
                    }
                }

                if (typeof(TInputType) == typeof(bool)) {
                    builder.SetUpdatesAttributeName("checked");
                }
                else {
                    builder.SetUpdatesAttributeName("value");
                }

                if (EditContext is not null) {
                    builder.AddAttribute(220, "onblur", EventCallback.Factory.Create<FocusEventArgs>(this, args => {
                        EditContext.NotifyFieldChanged(FieldIdentifier);
                    }));
                }

                builder.AddElementReferenceCapture(230, e => Element = e);

                builder.OpenRegion(231);
                RenderChildContent(builder);
                builder.CloseRegion();

                builder.CloseElement();

                builder.OpenRegion(235);
                RenderCustomContent(builder);
                builder.CloseRegion();

                if (EditContext is not null && !DisableValidationMessage && ValueExpression is not null) {
                    builder.OpenComponent<ValidationMessage<TInputType>>(240);
                    builder.AddComponentParameter(250, nameof(ValidationMessage<TInputType>.For), ValueExpression);
                    builder.AddAttribute(260, "class", "tnt-components tnt-validation-message tnt-body-small");
                    builder.CloseComponent();
                }
            }
            {
                if (!string.IsNullOrWhiteSpace(Label)) {
                    builder.OpenElement(270, "span");
                    builder.AddAttribute(280, "class", CssClassBuilder.Create().AddClass("tnt-label").Build());
                    builder.AddContent(290, Label);
                    builder.CloseElement();
                }
            }
            {
                if (EndIcon is not null) {
                    builder.AddContent(300, EndIcon.Render());
                }
            }
        }

        builder.CloseElement();
    } *@