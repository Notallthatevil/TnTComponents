@inherits TnTIconComponent
@typeparam TInputType

<div class="tnt-input-field @GetFromType() @(Active ? "active" : string.Empty)" theme="@Theme">
    @GetIcon()
    <input type="text"
           disabled="@Disable"
           placeholder="@Placeholder"
           @bind="@Value"
           @bind:event="oninput"
           @onchange="@((args => ValueChanged.InvokeAsync((TInputType?)args?.Value)))"
           @onfocusin=@(() => Active = true)
           @onfocusout=@(() => Active = false)>


    @if (!string.IsNullOrWhiteSpace(Label)) {
        <label class="tnt-input-field-label @(!string.IsNullOrWhiteSpace(Placeholder) || !string.IsNullOrWhiteSpace(Icon) ? "placeholder" : string.Empty) @(Active || !string.IsNullOrWhiteSpace(Value?.ToString()) ? "active" : string.Empty)">
            @Label
        </label>
    }
</div>

@if (!string.IsNullOrWhiteSpace(HelperText)) {
    <span class="helper-text">@HelperText</span>
}


@code {
    [CascadingParameter]
    public TnTForm? ParentForm { get; set; }

    [Parameter]
    public string Label { get; set; } = default!;

    [Parameter]
    public string Placeholder { get; set; } = " ";

    [Parameter]
    public bool Disable { get; set; } = false;

    [Parameter]
    public TInputType? Value { get; set; }

    [Parameter]
    public string? Format { get; set; }

    [Parameter]
    public EventCallback<TInputType?> ValueChanged { get; set; }

    [Parameter]
    public string? HelperText { get; set; }

    [Parameter]
    public FormType FormType { get; set; }

    protected bool Active;


    protected override void OnInitialized() {
        if (ParentForm is not null) {
            FormType = ParentForm.FormType;
            Theme = ParentForm.Theme;
        }
    }

    protected string GetFromType() {
        switch (FormType) {
            case FormType.Outlined: return "outlined";
            case FormType.Filled: return "filled";
            default:
                return string.Empty;
        }
    }

}