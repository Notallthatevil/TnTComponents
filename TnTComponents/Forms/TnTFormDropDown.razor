@using System.Reflection;
@typeparam TListItemType
@inherits TnTFormDialogField<TListItemType>

<div class="@GetClass()" theme="@Theme" @ref="BoxInputReference">
    @GetIcon()
    <input type="@InputType"
           readonly="true"
           disabled="@Disable"
           placeholder="@Placeholder"
           value="@GetItemValue(Value)"
           @ref="InputElementReference"
           @onchange="OnChange"
           @onfocusin="OnFocusAsync">

    @if (Active) {
        <ul @onmouseleave="Deactivate" class="@(HasSpaceBelow ? string.Empty : "dropup")">
            @if (!string.IsNullOrWhiteSpace(Placeholder)) {
                @if (AllowClear) {
                    <li class="placeholder" @onclick="ClearSelection">
                        @Placeholder
                    </li>
                }
                else {
                    <li class="placeholder">
                        @Placeholder
                    </li>
                }
            }

            @foreach (var item in ListItems) {
                <li class="@GetItemClass(item)" @onclick="@(() => SelectItem(item))">
                    @if (ListItemTemplate != null) {
                        @ListItemTemplate(item)
                    }
                    else {
                        @GetItemValue(item)
                    }
                </li>
            }
        </ul>
    }

    @if (AllowClear && Value != null) {
        @GetClearIcon()
    }
    @GetDropdownIcon()

    @if (!string.IsNullOrWhiteSpace(Label)) {
        <label class="tnt-input-field-label @(!string.IsNullOrWhiteSpace(Placeholder) || !string.IsNullOrWhiteSpace(Icon) ? "placeholder" : string.Empty) @(Active || !string.IsNullOrWhiteSpace(Value?.ToString()) ? "active" : string.Empty)">
            @Label
        </label>
    }

</div>

@if (!string.IsNullOrWhiteSpace(HelperText)) {
    <span class="helper-text">@HelperText</span>
}

@code {
    protected override string InputType => "text";

    [Parameter]
    public ICollection<TListItemType> ListItems { get; set; } = default!;

    [Parameter]
    public RenderFragment<TListItemType> ListItemTemplate { get; set; } = default!;

    [Parameter]
    public string? DisabledProperty { get; set; }

    [Parameter]
    public string? TextProperty { get; set; }

    [Parameter]
    public Func<TListItemType?, string>? ValueCallback{ get; set; }

    private PropertyInfo? _textProperty;
    private PropertyInfo? _disabledProperty;

    protected override void OnInitialized() {
        if (ListItems is null) {
            throw new ArgumentNullException(nameof(ListItems), "Must provide a valid list of items, even if empty");
        }

        if (!typeof(TListItemType).IsPrimitive && typeof(TListItemType) != typeof(string) && string.IsNullOrWhiteSpace(TextProperty)) {
            throw new ArgumentNullException(nameof(TextProperty), $"When specifying a non-primitive type and non-string type. The {TextProperty} must be provided!");
        }

        if (!string.IsNullOrWhiteSpace(TextProperty)) {
            _textProperty = typeof(TListItemType).GetProperty(TextProperty);
            if (_textProperty?.PropertyType != typeof(string)) {
                throw new InvalidOperationException($"{nameof(TextProperty)} must reflect a property of type string");
            }
        }

        if (!string.IsNullOrWhiteSpace(DisabledProperty)) {
            _disabledProperty = typeof(TListItemType).GetProperty(DisabledProperty);
            if (_disabledProperty?.PropertyType != typeof(bool)) {
                throw new InvalidOperationException($"{nameof(DisabledProperty)} must reflect a property of type bool");
            }
        }

        base.OnInitialized();
    }

    protected override async Task OnChange(ChangeEventArgs e) {
        await ValueChanged.InvokeAsync((TListItemType?)e?.Value);
    }

    protected override string GetClass() {
        return $"{base.GetClass()} dropdown";
    }

    private async Task SelectItem(TListItemType selectedItem) {
        if (IsItemDisabled(selectedItem)) {
            return;
        }
        await Deactivate();
        if (!selectedItem?.Equals(Value) ?? false) {
            Value = selectedItem;
            await OnChange(new ChangeEventArgs() { Value = Value });
        }
    }

    private bool IsItemDisabled(TListItemType item) {
        return _disabledProperty is not null && (((bool?)_disabledProperty.GetValue(item)) ?? false);
    }

    private string GetItemClass(TListItemType item) {
        return IsItemDisabled(item) ? "disabled" : string.Empty;
    }

    private object? GetItemValue(TListItemType? item) {
        if(ValueCallback != null) {
            return ValueCallback(item);
        }
        else if (_textProperty is not null && item != null) {
            return _textProperty.GetValue(item);
        }
        return item?.ToString() ?? string.Empty;
    }
}
