@using System.Reflection;
@typeparam TListItemType
@inherits TnTFormDialogField<TListItemType>

<div class="@GetCssClass()" theme="@Theme" @ref="BoxInputReference">
    @GetIcon()
    <input type="@InputType"
           readonly="true"
           disabled="@Disable"
           placeholder="@Placeholder"
           value="@GetItemValue(Value)"
           @ref="InputElementReference"
           @onchange="OnChange"
           @onfocusin="OnFocusAsync">

    @if (Active) {
        <TnTExternalClickHandler Callback="Deactivate">
            <ul class="@(HasSpaceBelow ? string.Empty : "dropup")">
                @if (!string.IsNullOrWhiteSpace(Placeholder)) {
                    @if (AllowClear) {
                        <li class="placeholder" @onclick="ClearSelection">
                            @Placeholder
                        </li>
                    }
                    else {
                        <li class="placeholder">
                            @Placeholder
                        </li>
                    }
                }

                @foreach (var item in ListItems) {
                    <li class="@GetItemClass(item)" @onclick="@(() => SelectItem(item))" @onclick:stopPropagation="true">
                        @if (ListItemTemplate != null) {
                            @ListItemTemplate(item)
                        }
                        else {
                            @GetItemValue(item)
                        }
                    </li>
                }
            </ul>
        </TnTExternalClickHandler>
    }

    @if (AllowClear && Value != null) {
        @GetClearIcon()
    }
    @GetDropdownIcon()

    @if (!string.IsNullOrWhiteSpace(Label)) {
        <label class="tnt-input-field-label @(!string.IsNullOrWhiteSpace(Placeholder) || !string.IsNullOrWhiteSpace(Icon) ? "placeholder" : string.Empty) @(Active || !string.IsNullOrWhiteSpace(Value?.ToString()) ? "active" : string.Empty)">
            @Label
        </label>
    }

</div>

@if (!string.IsNullOrWhiteSpace(HelperText)) {
    <span class="helper-text">@HelperText</span>
}

@code {
    protected override string InputType => "text";

    [Parameter]
    public ICollection<TListItemType> ListItems { get; set; } = default!;

    [Parameter]
    public RenderFragment<TListItemType> ListItemTemplate { get; set; } = default!;

    [Parameter]
    public Func<TListItemType?, string>? ValueCallback { get; set; }

    [Parameter]
    public IReadOnlySet<TListItemType> DisabledItems { get; set; } = new HashSet<TListItemType>();

    protected override void OnInitialized() {
        if (ListItems is null) {
            throw new ArgumentNullException(nameof(ListItems), "Must provide a valid list of items, even if empty");
        }

        base.OnInitialized();
    }

    protected override async Task OnChange(ChangeEventArgs e) {
        await ValueChanged.InvokeAsync((TListItemType?)e?.Value);
    }

    protected override string GetCssClass() {
        return $"{base.GetCssClass()} dropdown";
    }

    private async Task SelectItem(TListItemType selectedItem) {
        if (IsItemDisabled(selectedItem)) {
            return;
        }
        await Deactivate();
        if (!selectedItem?.Equals(Value) ?? false) {
            Value = selectedItem;
            await OnChange(new ChangeEventArgs() { Value = Value });
        }
    }

    private bool IsItemDisabled(TListItemType item) {
        return DisabledItems.Contains(item);
    }

    private string GetItemClass(TListItemType item) {
        return IsItemDisabled(item) ? "disabled" : string.Empty;
    }

    private object? GetItemValue(TListItemType? item) {
        if (ValueCallback != null) {
            return ValueCallback(item);
        }
        else {
            return item?.ToString() ?? string.Empty;
        }
    }
}
