@using System.Globalization
@inherits TnTInputDialogField<DateOnly>

<TnTExternalClickHandler Callback="@(() => OnFocusOutAsync(new FocusEventArgs()))">
    <div theme="@Theme" class="@GetCssClass()" @ref="@ContainerElementReference">
        @TnTIconComponent.GetIcon(IconType, Icon)
        <input aria-label="@Label"
               name="@NameAttributeValue"
               disabled="@Disabled"
               placeholder="@Placeholder"
               readonly="true"
               @bind="@CurrentValueAsString"
               @ref="@InputElement"
               @onfocusin="OnFocusInAsync" />


        <div class="tnt-date-time-picker">
            <TnTRow>
                <TnTColumn S="12">

                    @switch (IconType) {
                        case IconType.FontAwesome:
                            <i class="fa fa-arrow-left @(Disabled ? "disabled" : string.Empty)" @onclick="PrevMonth"></i>
                            break;

                        case IconType.MaterialIcons:
                            <i class="material-icons  @(Disabled ? "disabled" : string.Empty)" @onclick="PrevMonth">chevron_left</i>
                            break;

                        default:
                            throw new NotImplementedException();
                    }

                    <TnTDropDown ListItems="_months" AllowClear="false" Label="Month" DisabledItems="_disabledMonths" @bind-Value="_selectedMonth" class="tnt-month-picker">


                    </TnTDropDown>

                    @* <TnTDropDown ListItems="_months"
                    Theme="@Theme"
                    AllowClear=false
                    FormType="FormType"
                    IconType="IconType"
                    Label="Month"
                    @bind-Value="_selectedMonth"
                    DisabledItems="_disabledMonths"
                    class="tnt-month-picker">
                    <ListItemTemplate>
                    @DateTimeFormatInfo.CurrentInfo.GetMonthName(context)
                    </ListItemTemplate>
                    </TnTDropDown>
                    <TnTDropDown ListItems="_years" Theme="@Theme" AllowClear=false FormType="FormType" IconType="IconType" Label="Year" @bind-Value="_selectedYear" class="tnt-year-picker" />*@
                    @switch (IconType) {
                        case IconType.FontAwesome:
                            <i class="fa fa-arrow-right @(Disabled ? "disabled" : string.Empty)" @onclick="NextMonth"></i>
                            break;

                        case IconType.MaterialIcons:
                            <i class="material-icons  @(Disabled ? "disabled" : string.Empty)" @onclick="NextMonth">chevron_right</i>
                            break;

                        default:
                            throw new NotImplementedException();
                    }
                </TnTColumn>
            </TnTRow>
            @*
            <table>
            <thead>
            <tr>
            @foreach (var day in DateTimeFormatInfo.CurrentInfo.AbbreviatedDayNames) {
            <th>
            @day.First()
            </th>
            }
            </tr>
            </thead>
            <tbody>
            @{
            var date = GetStartDate();
            }
            @for (var i = 0; i < 6; ++i) {
            <tr>
            @for (var j = 0; j < 7; ++j, date = date.AddDays(1)) {
            var itemDate = date;
            <td @onclick="@(() => SelectDate(itemDate))" @onclick:stopPropagation="true">
            <div class="@GetDateItemClass(itemDate)">
            @itemDate.Day
            </div>
            </td>
            }
            </tr>
            }
            </tbody>
            </table>*@
        </div>
        @*
        @if (AllowClear && !string.IsNullOrWhiteSpace(CurrentValueAsString)) {
        switch (IconType) {
        case IconType.FontAwesome:
        <i class="fa fa-close" @onclick="ClearSelection"></i>
        break;

        case IconType.MaterialIcons:
        <i class="material-icons" @onclick="ClearSelection">close</i>
        break;

        default:
        throw new NotImplementedException();
        }
        }

        @switch (IconType) {
        case IconType.FontAwesome:
        <i class="fa fa-dropdown" @onclick="@(() => OnFocusInAsync(new FocusEventArgs()))"></i>
        break;

        case IconType.MaterialIcons:
        <i class="material-icons" @onclick="@(() => OnFocusInAsync(new FocusEventArgs()))">arrow_drop_down</i>
        break;

        default:
        throw new NotImplementedException();
        }

        <label class="@GetLabelCssClass()" @onclick="SetInputFocus">@Label</label>
        *@
    </div>
</TnTExternalClickHandler>
@if (ShowValidation) {
    <ValidationMessage class="@GetValidationMessageCssClass()" theme="@Theme" For="ValueExpression" />
}