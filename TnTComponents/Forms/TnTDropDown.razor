@typeparam TListItemType
@inherits TnTInputDialogField<TListItemType>

<TnTExternalClickHandler Callback="@(() => OnFocusOutAsync(new FocusEventArgs()))">
    @{
        var id = Guid.NewGuid().ToString();
        <div theme="@Theme" class="@GetCssClass()" id="@id" @ref="@ContainerElementReference">
            @TnTIconComponent.GetIcon(IconType, Icon)
            <input @attributes="AdditionalAttributes"
                   aria-label="@Label"
                   name="@NameAttributeValue"
                   disabled="@Disabled"
                   placeholder="@Placeholder"
                   value="@GetItemValue(CurrentValue)"
                   readonly="true"
                   @ref="@InputElement"
                   @onfocusin="OnFocusInAsync" />
            <label class="@GetLabelCssClass()" @onclick="SetInputFocus">@Label</label>

            <ul role="listbox" class="@(HasSpaceBelow ? string.Empty : "dropup")">

                @if (!string.IsNullOrWhiteSpace(Placeholder)) {
                    @if (AllowClear) {
                        if (Interactive) {
                            <li role="option" class="placeholder" @onclick="ClearSelection">
                                @Placeholder
                            </li>
                        }
                        else {
                            <li role="option" class="placeholder" onclick="(function() { document.getElementById('@id').getElementsByTagName('input')[0].value = '';})()">
                                @Placeholder
                            </li>
                        }
                    }
                    else {
                        <li role="option" class="placeholder">
                            @Placeholder
                        </li>
                    }
                }
                @if (Interactive) {
                    @foreach (var item in ListItems) {
                        <li role="option" class="@GetItemClass(item)" @onclick="@(() => SelectItem(item))" @onclick:stopPropagation="true">
                            @if (ListItemTemplate != null) {
                                @ListItemTemplate(item)
                            }
                            else {
                                @GetItemValue(item)
                            }
                        </li>
                    }
                }
                else {
                    @foreach (var item in ListItems) {
                        <li role="option" class="@GetItemClass(item)" onclick="(function () { document.getElementById('@id').getElementsByTagName('input')[0].value = '@GetItemValue(item)';})()">
                            @if (ListItemTemplate != null) {
                                @ListItemTemplate(item)
                            }
                            else {
                                @GetItemValue(item)
                            }
                        </li>
                    }
                }
            </ul>

            @if (AllowClear && CurrentValue != null) {
                switch (IconType) {
                    case IconType.FontAwesome:
                        <i class="fa fa-close" @onclick="ClearSelection"></i>
                        break;

                    case IconType.MaterialIcons:
                        <i class="material-icons" @onclick="ClearSelection">close</i>
                        break;

                    default:
                        throw new NotImplementedException();
                }
            }

            @switch (IconType) {
                case IconType.FontAwesome:
                    <i class="fa fa-dropdown" @onclick="@(() => OnFocusInAsync(new FocusEventArgs()))"></i>
                    break;

                case IconType.MaterialIcons:
                    <i class="material-icons" @onclick="@(() => OnFocusInAsync(new FocusEventArgs()))">arrow_drop_down</i>
                    break;

                default:
                    throw new NotImplementedException();
            }

        </div>
    }

</TnTExternalClickHandler>
@if (ShowValidation) {
    <ValidationMessage class="@GetValidationMessageCssClass()" theme="@Theme" For="ValueExpression" />
}

