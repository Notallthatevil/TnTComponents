@*
<CascadingValue IsFixed="true" Value="this">
    @if (Header is not null) {
        <div class="@BuildCssClassList(HeaderCssClass)" theme="@Theme" id="@_tntHeaderId" @ref="_headerRef">
            @Header
        </div>
    }

    @if (SideNav is not null) {
        <div class="@BuildCssClassList(SideNavCssClass)" theme="@Theme" id="@TnTSideNavId" @ref="_sideNavRef">
            @SideNav
        </div>
    }

    <div class="@BuildCssClassList(BodyCssClass)" theme="@Theme" id="@_tntBodyId" @ref="_bodyRef">
        @Body
    </div>

    @if (Footer is not null) {
        <div class="@BuildCssClassList(FooterCssClass)" theme="@Theme" id="@_tntFooterId" @ref="_footerRef">
            @Footer
        </div>
    }
</CascadingValue>
@if (SideNav is not null && !Interactive) {
    var functionName = "func_" + Guid.NewGuid().ToString().Replace("-", string.Empty);
    <script type="text/javascript">
        function @(functionName!)() {
            let sideNav = document.getElementById("@(TnTSideNavId)");

            if (!sideNav) {
                return;
            }

            TnTLayout.sideNavCallback(document.getElementById("@(_tntBodyId)"), sideNav);

        @if (Header is not null) {
            <text>TnTLayout.sideNavCallback(document.getElementById(
                        "@_tntHeaderId"
                    ), sideNav); </text>
        }

        @if (Footer is not null) {
            <text>TnTLayout.sideNavCallback(document.getElementById(
                        "@_tntFooterId"
                    ), sideNav); </text>
        }
                        }

        window.TnTLayout = {

            sideNavCallbacks: [],
            sideNavCallback: function (element, sideNavElement) {
                if (element && sideNavElement) {
                    function expandAdded() {
                        element.classList.add('expand');
                    };

                    function expandRemove() {
                        element.classList.remove('expand');
                    }


                    this.sideNavCallbacks[element.id] = new TnTClassWatcher(sideNavElement, 'expand', expandAdded, expandRemove);
                }
            },
            toggle: function () {
                var sideNav = document.getElementById(
                    '@(TnTSideNavId)'
                );
                if (!sideNav || !sideNav.classList) {
                    return;
                }
                if (!sideNav.classList.contains('@(TnTLayout.ExpandClass)')) {
                    sideNav.classList.add('@(TnTLayout.ExpandClass)');
                }
                else {
                    sideNav.classList.remove('@(TnTLayout.ExpandClass)');
                }
            }
        }

        class TnTClassWatcher {
            constructor(targetNode, classToWatch, classAddedCallback, classRemovedCallback) {
                this.targetNode = targetNode;
                this.classToWatch = classToWatch;
                this.classAddedCallback = classAddedCallback;
                this.classRemovedCallback = classRemovedCallback;
                this.observer = null;
                this.lastClassState = targetNode.classList.contains(this.classToWatch);

                this.init();
            }

            init() {
                this.observer = new MutationObserver(this.mutationCallback);
                this.observe();
            }

            observe() {
                this.observer.observe(this.targetNode, { attributes: true });
            }

            disconnect() {
                this.observer.disconnect();
            }

            mutationCallback = mutationsList => {
                for (let mutation of mutationsList) {
                    if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                        let currentClassState = mutation.target.classList.contains(this.classToWatch);
                        if (this.lastClassState !== currentClassState) {
                            this.lastClassState = currentClassState;
                            if (currentClassState) {
                                this.classAddedCallback();
                            }
                            else {
                                this.classRemovedCallback();
                            }
                        }
                    }
                }
            }
        }

        window.onload = @(functionName)();


    </script>
}*@