@namespace TnTComponents
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using TnTComponents.Core
@using TnTComponents.Grid
@typeparam TItem

<div @attributes="AdditionalAttributes" class="@CssClass" style="@GetStyle()">
    <table @ref="_element">
        <CascadingValue Value="this" IsFixed="true">
            @ChildContent
            <DeferRendering>
                <thead>
                    <tr>
                        @foreach (var col in _columns) {
                            if (col.Sortable) {
                                var sortedOn = _lastSortColumn == col;
                                <th @key="col"
                                    scope="col"
                                    class="@(CssClassBuilder.Create()
                                        .AddClass("tnt-sortable", col.Sortable)
                                        .AddClass("tnt-sorted-asc", sortedOn && !_descending)
                                        .AddClass("tnt-sorted-desc", sortedOn && _descending)
                                        .Build())"
                                    @onclick="@(() => SortOn(col))">
                                    @{
                                        col.RenderHeaderContent(__builder3);
                                        @if (sortedOn) {
                                            @MaterialIcon.ArrowDropDown.Render()
                                        }
                                    }
                                </th>
                            }
                            else {
                                <th @key="col" scope="col" class="@(CssClassBuilder.Create().Build())">
                                    @{
                                        col.RenderHeaderContent(__builder3);
                                    }
                                </th>
                            }

                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in GetSorted().Select((Row, Index) => new { Row, Index = Index + 2 })) {
                        var row = item.Row;
                        var index = item.Index;
                        <tr aria-rowindex="@index" @key="row" @onclick="@(() => RowClickedCallback.InvokeAsync(row))">
                            @foreach (var col in _columns) {
                                <td @key="col">
                                    @{
                                        col.RenderCellContent(__builder3, row);
                                    }
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </DeferRendering>
        </CascadingValue>
    </table>
</div>
