@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using TnTComponents.Core
@using TnTComponents.Grid
@using TnTComponents.Grid.Columns
@using TnTComponents.Grid.Infrastructure
@namespace TnTComponents
@typeparam TGridItem
@inherits TnTPageScriptComponent<TnTDataGrid<TGridItem>>
@implements IHandleEvent
<CascadingValue TValue="TnTInternalGridContext<TGridItem>" IsFixed="true" Value="@_internalGridContext">
    @{
        StartCollectingColumns();
    }
    @if (!_manualGrid)
    {
        @ChildContent
    }
    <DeferRendering>
        @{
            FinishCollectingColumns();
        }
        <ColumnsCollectedNotifier TGridItem="TGridItem" />
        <table @attributes="AdditionalAttributes"
               class="@ElementClass"
               style="@ElementStyle"
               lang="@ElementLang"
               title="@ElementTitle"
               id="@ElementId"
               aria-rowcount="@(_ariaBodyRowCount + 1)"
               @ref="Element">

            <thead>
                <tr class="tnt-components tnt-data-grid-header" aria-rowindex="1">
                    @foreach (var col in _columns)
                    {
                        var CellId = TnTComponentIdentifier.NewId();
                        col.ShowSortIcon = _sortByColumn == col;
                        <TnTDataGridHeaderCell class="@($"{col.ElementClass}{(col.Sortable && _interactive ? " tnt-col-sortable" : null)}")"
                                               style="@col.ElementStyle"
                                               aria-sort="@(_sortByColumn == col? (_sortByAscending ? "ascending" : "descending"): null)"
                                               @key="@col" scope="col"
                                               TGridItem="TGridItem">
                            @col.HeaderContent
                        </TnTDataGridHeaderCell>
                    }
                </tr>
            </thead>
            <tbody>
                @if (_loading && _ariaBodyRowCount <= 0)
                {
                    @_renderLoadingContent
                }
                else if (Virtualize)
                {
                    if (_ariaBodyRowCount == 0)
                    {
                        @_renderEmptyContent
                    }
                    else
                    {
                        <Virtualize @ref="@_virtualizeComponent"
                                    TItem="(int RowIndex, TGridItem Data)"
                                    ItemSize="@ItemSize"
                                    ItemsProvider="@ProvideVirtualizedItemsAsync"
                                    ItemContent="@(item => builder => RenderRow(builder, item.RowIndex, item.Data))"
                                    OverscanCount="@OverscanCount"
                                    Placeholder="@(placeholderContext => builder => RenderPlaceholderRow(builder, placeholderContext))" />
                    }
                }
                else
                {
                    @_renderNonVirtualizedRows
                }

                @if (_manualGrid)
                {
                    @ChildContent
                }
            </tbody>

        </table>
    </DeferRendering>
</CascadingValue>

@code {
    private void RenderNonVirtualizedRows(RenderTreeBuilder __builder)
    {
        var initialRowIndex = 1; // aria-rowindex is 1-based, plus 1 if there is a header
        var rowIndex = initialRowIndex;
        if (_currentNonVirtualizedViewItems.Any())
        {
            Loading = false;
            foreach (var item in _currentNonVirtualizedViewItems)
            {
                RenderRow(__builder, rowIndex++, item);
            }
        }
        else
        {
            RenderEmptyContent(__builder);
        }
    }

    private void RenderRow(RenderTreeBuilder __builder, int rowIndex, TGridItem item)
    {
        var rowClass = RowClass?.Invoke(item) ?? null;
        var rowStyle = RowStyle?.Invoke(item) ?? null;
        Loading = false;
        <TnTDataGridRow @key="@(ItemKey(item))"
                        aria-rowindex="@rowIndex"
                        class="@rowClass"
                        style="@CssStyleBuilder.Create().AddStyle(rowStyle, null).AddStyle("height", $"{ItemSize}px").Build()" OnClick="@OnRowClicked" TGridItem="TGridItem" Item="@item">
            @for (var colIndex = 0; colIndex < _columns.Count; colIndex++)
            {
                var col = _columns[colIndex];

                <TnTDataGridCell @key="@col" class="@col.ElementClass" style="@col.ElementStyle" TGridItem="TGridItem" Item="@item">
                    @((RenderFragment)(__builder => col.CellContent(__builder, item)))
                </TnTDataGridCell>
            }
        </TnTDataGridRow>
    }

    private void RenderPlaceholderRow(RenderTreeBuilder __builder, PlaceholderContext placeholderContext)
    {
        string? _rowsDataSize = $"height: {ItemSize}px";

        <TnTDataGridRow aria-rowindex="@(placeholderContext.Index + 1)" style="@_rowsDataSize" TGridItem="TGridItem">
            @for (var colIndex = 0; colIndex < _columns.Count; colIndex++)
            {
                var col = _columns[colIndex];

                <TnTDataGridCell class="grid-cell-placeholder" @key="@col" GridColumn=@(colIndex+1) TGridItem="TGridItem">
                    @((RenderFragment)(__builder => col.RenderPlaceholderContent(__builder, placeholderContext)))
                </TnTDataGridCell>
            }
        </TnTDataGridRow>
    }

    private void RenderEmptyContent(RenderTreeBuilder __builder)
    {
        @if (_manualGrid)
        {
            return;
        }
        <tr class="empty-content-row">
            <td class="empty-content-cell" colspan="1000">
                @if (EmptyContent is null)
                {
                    @("No data to show!")
                }
                else
                {
                    @EmptyContent
                }
            </td>
        </tr>

    }

    private void RenderLoadingContent(RenderTreeBuilder __builder)
    {
        @if (LoadingContent is null)
        {
            @for (var i = 0; i < 5; ++i)
            {
                RenderPlaceholderRow(__builder, new PlaceholderContext(i, ItemSize));
            }
        }
        else
        {
            <TnTDataGridRow TGridItem="TGridItem" Class="loading-content-row">
                <TnTDataGridCell Class="loading-content-cell">
                    @LoadingContent
                </TnTDataGridCell>
            </TnTDataGridRow>
        }
    }
}
