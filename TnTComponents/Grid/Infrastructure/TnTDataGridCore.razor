@using Microsoft.AspNetCore.Components.Rendering
@typeparam TGridItem
@inherits TnTComponentBase
<div class="@_gridSettings.ContainerClass" style="@GetContainerStyle()">
    <table @attributes=@AdditionalAttributes class="@GetClass()" style="@Style" theme="@Theme" @ref="@Element">
        <thead>
            <tr>
                @_renderHeaderContent
            </tr>
        </thead>
        <tbody>
            @_renderRowContent
        </tbody>
    </table>
</div>

@if (!_gridSettings.Appearance.HasFlag(DataGridAppearance.Compat)) {
    <TnTPageScript Src="@($"./_content/TnTComponents/Grid/TnTDataGrid.razor.js?tntdatagrididentifier={ComponentIdentifier}")" />
}
<TnTPageScript Src="./_content/TnTComponents/TnTButton.razor.js?class=tnt-sortable" />

@code {

    private void RenderHeaderContent(RenderTreeBuilder __builder) {
        @if (_gridSettings.ShowRowIndex) {
            <th></th>
        }

        foreach (var column in _context.Columns) {
            if (_sortedOn == null && column.DefaultSort) {
                SortOn(column);
            }
            if (column.Sortable && Interactive) {
                <th @key="@column" class="tnt-sortable" scope="col" nowrap="nowrap" style="cursor: pointer;" @onclick="@(() => SortOn(column))">
                    @{
                        column.RenderHeaderContent(__builder);
                    }
                    @if (_sortedOn == column) {
                        if (_ascending) {
                            @TnTIconComponent.RenderIcon(_gridSettings.IconType, "keyboard_arrow_up")
                        }
                        else {
                            @TnTIconComponent.RenderIcon(_gridSettings.IconType, "keyboard_arrow_down")
                        }
                    }
                </th>
            }
            else {
                <th @key="@column" scope="col" nowrap="nowrap">
                    @{
                        column.RenderHeaderContent(__builder);
                    }
                </th>
            }
        }
    }

    private void RenderRowContent(RenderTreeBuilder __builder) {
        if (_gridSettings.Items is not null) {
            foreach (var item in _gridSettings.Items.Select((Item, Index) => new { Item, Index = Index + 1 })) {
                var i = item.Index;
                var j = item.Item;
                <tr aria-rowindex="@i"
                    style="@(_gridSettings.RowClickedCallback.HasDelegate && Interactive ? "cursor: pointer;" : null)"
                    @key="@j"
                    @onclick="@((args) => RowClicked(args, j, i))">
                    @if (_gridSettings.ShowRowIndex) {
                        <td>
                            @i
                        </td>
                    }

                    @foreach (var column in _context.Columns) {
                        <td @key="@column">
                            @{
                                column.RenderCellContent(__builder, j);
                            }
                        </td>
                    }
                </tr>
            }
        }
    }
}