@using Microsoft.AspNetCore.Components.Rendering
@using global::TnTComponents.Infrastructure
@inherits TnTBaseComponent
@typeparam TGridItem

<CascadingValue Value="_gridContext" IsFixed="true">
    @ChildContent
    <table class="@GetCssClass()" 
        theme="@Theme" 
        cellpadding="0"
        cellspacing="0"
        @attributes="@AdditionalAttributes" 
        @ref="@_tableReference">
        <thead>
            <tr aria-rowindex="1">
                @if (IncludeIndexColumn) {
                    <th class="tnt-grid-column-index-header" rowspan="1" colspan="1">
                        @if (Resizable) {
                            <div class="tnt-grid-resizer">
                            </div>
                        }
                    </th>
                }

                @foreach (var column in _gridContext.Columns) {
                    <th class="@column.ColumnHeaderClass" @key="@column" scope="col">
                        @column.HeaderContent
                        @if (Resizable) {
                            <div class="tnt-grid-resizer">

                            </div>
                        }
                    </th>

                    

                }
            </tr>
        </thead>
        <tbody>
            @_renderTableRows
        </tbody>
    </table>
</CascadingValue>


@code {
    private void RenderTableRows(RenderTreeBuilder __builder) {
        var rowIndex = 2; // Row index is 1 based, two includes the header.
        @foreach (var item in Items) {
            <tr @key="@(ItemKey(item))" aria-rowindex="@rowIndex">
                @if (IncludeIndexColumn) {
                    RenderIndexColumn(__builder, item, rowIndex - 1);
                }
                @{
                    RenderRow(__builder, item);
                }
            </tr>
            rowIndex++;
        }
    }

    private void RenderIndexColumn(RenderTreeBuilder __builder, TGridItem item, int rowIndex) {
        <td class="tnt-grid-index-column-content">
            @rowIndex
        </td>
    }

    private void RenderRow(RenderTreeBuilder __builder, TGridItem item) {
        @foreach (var column in _gridContext.Columns) {
            <td class="@(column.ColumnContentClass)" @key="@column">
                @column.CellContent(item)
            </td>
        }
    }

}
