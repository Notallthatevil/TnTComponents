@using TnTComponents.Core
@using TnTComponents.Grid
@namespace TnTComponents
@inherits TnTDisposableComponentBase

<div @attributes="AdditionalAttributes" class="@ElementClass" style="@ElementStyle" @ref="Element">
    @{
        var disableLeftPages = _numberOfPages == 0 || PaginationState.CurrentPageIndex == 0;
    }
    <TnTButton class="@($"pagination-btn pagination-first-page{(disableLeftPages ? " tnt-disabled" : "")}")" ElementTitle="First page" aria-label="First page" disabled="@disableLeftPages" BackgroundColor="@BackgroundColor" TextColor="@TextColor" OnClickCallback="@(() => PaginationState.SetCurrentPageIndexAsync(0))" Appearance="ButtonAppearance.Elevated">
        <MaterialIcon Icon="@MaterialIcon.FirstPage" Size="IconSize.Small"/>
    </TnTButton>
    <TnTButton class="@($"pagination-btn pagination-previous-page{(disableLeftPages ? " tnt-disabled" : "")}")" ElementTitle="Previous page" aria-label="Previous page" disabled="@disableLeftPages" BackgroundColor="@BackgroundColor" TextColor="@TextColor" OnClickCallback="@(() => PaginationState.SetCurrentPageIndexAsync(PaginationState.CurrentPageIndex - 1))" Appearance="ButtonAppearance.Elevated">
        <MaterialIcon Icon="@MaterialIcon.ChevronLeft" Size="IconSize.Small"/>
    </TnTButton>

    @{
        // Only render page buttons if we have valid pagination state
        if (PaginationState.TotalItemCount.HasValue && PaginationState.TotalItemCount.Value > 0 && PaginationState.LastPageIndex.HasValue)
        {
            var currentPageIndex = PaginationState.CurrentPageIndex;
            var lastPageIndex = PaginationState.LastPageIndex.Value;
            
            // Ensure we don't go beyond valid bounds
            if (currentPageIndex <= lastPageIndex)
            {
                // Calculate the window of pages to show (up to 5 pages)
                const int maxPagesToShow = 5;
                var totalPages = lastPageIndex + 1; // Convert from 0-based to count
                var pagesToShow = Math.Min(maxPagesToShow, totalPages);
                
                // Calculate start and end indices for the page window
                var startIndex = Math.Max(0, currentPageIndex - (pagesToShow / 2));
                var endIndex = Math.Min(lastPageIndex, startIndex + pagesToShow - 1);
                
                // Adjust start if we're near the end and have fewer pages than max
                if (endIndex - startIndex + 1 < pagesToShow)
                {
                    startIndex = Math.Max(0, endIndex - pagesToShow + 1);
                }

                // Render page buttons
                for (var i = startIndex; i <= endIndex; i++)
                {
                    var pageIndex = i; // Capture for lambda
                    var isCurrentPage = currentPageIndex == pageIndex;
                    <TnTButton class="@($"pagination-btn{(isCurrentPage ? " current-page" : "")}")" 
                               ElementTitle="@pageIndex.ToString()" 
                               aria-label="@pageIndex" 
                               disabled="@isCurrentPage" 
                               BackgroundColor="@(isCurrentPage ? ActiveBackgroundColor : BackgroundColor)" 
                               TextColor="@(isCurrentPage ? ActiveTextColor : TextColor)" 
                               OnClickCallback="@(() => PaginationState.SetCurrentPageIndexAsync(pageIndex))" 
                               Appearance="ButtonAppearance.Elevated">
                        @(pageIndex + 1)
                    </TnTButton>
                }
            }
        }
    }

    @{
        var disableRightPages = _numberOfPages == 0 || PaginationState.CurrentPageIndex == PaginationState.LastPageIndex;
    }
    <TnTButton class="@($"pagination-btn pagination-next-page{(disableRightPages ? " tnt-disabled" : "")}")" ElementTitle="Next page" aria-label="Next page" disabled="@disableRightPages" BackgroundColor="@BackgroundColor" TextColor="@TextColor" OnClickCallback="@(() => PaginationState.SetCurrentPageIndexAsync(PaginationState.CurrentPageIndex + 1))" Appearance="ButtonAppearance.Elevated">
        <MaterialIcon Icon="@MaterialIcon.ChevronRight" Size="IconSize.Small"/>
    </TnTButton>
    <TnTButton class="@($"pagination-btn pagination-last-page{(disableRightPages ? " tnt-disabled" : "")}")" ElementTitle="Last page" aria-label="Last page" disabled="@disableRightPages" BackgroundColor="@BackgroundColor" TextColor="@TextColor" OnClickCallback="@(() => PaginationState.SetCurrentPageIndexAsync(_numberOfPages - 1))" Appearance="ButtonAppearance.Elevated">
        <MaterialIcon Icon="@MaterialIcon.LastPage" Size="IconSize.Small"/>
    </TnTButton>
</div>