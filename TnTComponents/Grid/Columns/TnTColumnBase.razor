@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using TnTComponents.Core
@using TnTComponents.Grid.Infrastructure;
@inherits TnTComponentBase
@typeparam TGridItem
@{
    InternalGridContext.Grid.AddColumn(this, InitialSortDirection, IsDefaultSortColumn);
}
@code
{
    private void RenderDefaultHeaderContent(RenderTreeBuilder __builder) {
        @if (HeaderCellItemTemplate is not null) {
            @HeaderCellItemTemplate(this)
        }
        else if (Sortable) {
            <div class="@(CssClassBuilder.Create().AddClass("tnt-header-content").AddClass("tnt-sorted-on", ShowSortIcon).AddTextAlign(HeaderAlignment).AddClass("tnt-interactable").AddRipple().Build())" @onclick="@(() => Grid.SortByColumnAsync(this))">
                @Title
                @if (ShowSortIcon) {
                    @if (Grid.SortByAscending == true) {
                        <MaterialIcon class="tnt-sort-icon" Icon="@MaterialIcon.ArrowDropUp" />
                    }
                    else {
                        <MaterialIcon class="tnt-sort-icon" Icon="@MaterialIcon.ArrowDropDown" />
                    }

                }
            </div>

        }
        else {
            <div class="@(CssClassBuilder.Create().AddClass("tnt-header-content").AddTextAlign(HeaderAlignment).Build())">
                @Title
            </div>
        }
    }

    internal void RenderPlaceholderContent(RenderTreeBuilder __builder, PlaceholderContext placeholderContext) {
        // Blank if no placeholder template was supplied, as it's enough to style with CSS by default
        if (PlaceholderTemplate is not null) {
            @PlaceholderTemplate(placeholderContext)
        }
    }
}
