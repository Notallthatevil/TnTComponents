@page "/"
@using System.ComponentModel.DataAnnotations;
@using TnTComponents.Enum;
@using TnTComponents.Forms
@attribute [RenderModeInteractiveAuto]

<TnTLayout Responsive="true">
    <TnTHeader SideBarExpanded="@_sideBarExpanded">
        <TnTSideBarToggle Click="@(()=> _sideBarExpanded = !_sideBarExpanded)">

        </TnTSideBarToggle>
        <h1>
            My Title
        </h1>
        <button @onclick="@(()=>_dark = !_dark)">Toggle</button>
        <h1>
            123
        </h1>
        <h1>
            456
        </h1>
        <h1>
            789
        </h1>
        <h1>
            123123123
        </h1>
    </TnTHeader>
    <TnTSideBar Expanded="@_sideBarExpanded">
        <TnTSideBarList>
            <TnTSideBarListItem Icon="search" Href="/link">
                Search
            </TnTSideBarListItem>
            <TnTSideBarListItem Icon="home">
                Home
            </TnTSideBarListItem>
            <TnTSideBarListItem Href="/asdf">
                Value
            </TnTSideBarListItem>
        </TnTSideBarList>
    </TnTSideBar>
    <TnTBody SideBarExpanded="@_sideBarExpanded">
        <TnTForm FormType="@_formType" TModelType="MyModel" Model="@_model" OnValidSubmit="@Submit" OnInvalidSubmit="@InvalidSubmit">
            <DataAnnotationsValidator />
            <TnTTextBox Icon="@_icon" @bind-Value="_model.Name" Label="My Label" Placeholder="@_placeholder" Disabled="@disabled" />
            <TnTPasswordBox Icon="@_icon" @bind-Value="_model.Password" Label="Password" Placeholder="@_placeholder" Disabled="@disabled" AllowPasswordReveal="true" />
            <TnTNumeric Icon="@_icon" @bind-Value="_model.Number" Label="Number" Placeholder="@_placeholder" Disabled="@disabled" />
            <TnTCheckbox Icon="@_icon" @bind-Value="_model.CheckBox" Label="Checkbox" Placeholder="@_placeholder" Disabled="@disabled" />
            <TnTSwitch Icon="@_icon" @bind-Value="_model.Switch" Label="Checkbox" Placeholder="@_placeholder" Disabled="@disabled" />
            <button type="submit">
                Submit
            </button>
        </TnTForm>

        <TnTButton Text="Toggle Disable" OnClick="@(() => disabled = !disabled)">
        </TnTButton>

        <TnTButton Text="Toggle Form Type" OnClick="@(() => RotateFormType())">

        </TnTButton>
        <TnTButton Text="Toggle Icon" OnClick="@(() => ToggleIcon())">
        </TnTButton>

        <TnTButton Text="Toggle Placeholder" OnClick="@(() => TogglePlaceholder())">
        </TnTButton>

        <div>
            @_model.Name
            @_model.Password
            @_model.Number
            @_model.CheckBox
            @_model.Switch
        </div>
    </TnTBody>
</TnTLayout>


<HeadContent>
    @if (_dark) {
        <link rel="stylesheet" href="_content/TnTComponents/style.dark.min.css" />
    }
    else {
        <link rel="stylesheet" href="_content/TnTComponents/style.light.min.css" />
    }
    </HeadContent>


    @code {
    private bool _dark = false;
    private bool _sideBarExpanded = false;
    private MyModel _model = new MyModel();

    private bool disabled = false;

    private FormType _formType = FormType.Underlined;

    private string _icon = string.Empty;

    private string _placeholder = string.Empty;

    private void RotateFormType() {
        switch (_formType) {
            case FormType.Underlined:
                _formType = FormType.Outlined;
                break;
            case FormType.Outlined:
                _formType = FormType.Filled;
                break;
            case FormType.Filled:
                _formType = FormType.Underlined;
                break;
        }

        StateHasChanged();
    }

    private void ToggleIcon() {
        if (string.IsNullOrWhiteSpace(_icon)) {
            _icon = "search";
        }
        else {
            _icon = string.Empty;
        }
    }

    private void TogglePlaceholder() {
        if (string.IsNullOrWhiteSpace(_placeholder)) {
            _placeholder = "My Placeholder";
        }
        else {
            _placeholder = string.Empty;
        }
    }

    class MyModel {
        [Required]
        [StringLength(10)]
        public string Name { get; set; }
        [Required]
        [StringLength(10)]
        public string Password { get; set; }
        [Range(1, 15)]
        public int Number { get; set; }
        [Required]
        [Range(typeof(bool), "true", "true")]
        public bool CheckBox { get; set; }
        [Required]
        [Range(typeof(bool), "true", "true")]
        public bool Switch { get; set; }
    }

    private void Submit(EditContext model) {
        int i = 0;
    }

    private void InvalidSubmit(EditContext errors) {
        var e = errors.GetValidationMessages()?.ToArray();
        int i = 0;
    }

    private void SideBarExpanded(bool expanded) {
        _sideBarExpanded = expanded;
    }
}