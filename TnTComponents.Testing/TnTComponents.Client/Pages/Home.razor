@page "/"
@using System.ComponentModel.DataAnnotations;
@using TnTComponents.Enum;
@using TnTComponents.Forms
@rendermode RenderMode.InteractiveAuto

<TnTLayout Responsive="true">
    <TnTHeader SideBarExpanded="@_sideBarExpanded">
        <TnTSideBarToggle Click="@(()=> _sideBarExpanded = !_sideBarExpanded)">

        </TnTSideBarToggle>
        <h1>
            My Title
        </h1>
        <button @onclick="@(()=>_dark = !_dark)">Toggle</button>
        <h1>
            123
        </h1>
        <h1>
            456
        </h1>
        <h1>
            789
        </h1>
        <h1>
            123123123
        </h1>
    </TnTHeader>
    <TnTSideBar Expanded="@_sideBarExpanded">
        <TnTSideBarList>
            <TnTSideBarListItem Icon="search" Href="/link">
                Search
            </TnTSideBarListItem>
            <TnTSideBarListItem Icon="home">
                Home
            </TnTSideBarListItem>
            <TnTSideBarListItem Href="/asdf">
                Value
            </TnTSideBarListItem>
        </TnTSideBarList>
    </TnTSideBar>
    <TnTBody SideBarExpanded="@_sideBarExpanded">
        <TnTRow>
            <TnTColumn S="12" L="6" >

                <TnTForm FormType="@_formType" TModelType="MyModel" Model="@_model" OnValidSubmit="@Submit" OnInvalidSubmit="@InvalidSubmit">
                    <DataAnnotationsValidator />
                    <TnTTextBox Icon="@_icon" @bind-Value="_model.Name" Label="My Label" Placeholder="@_placeholder" Disabled="@_disabled" />
                    <TnTPasswordBox Icon="@_icon" @bind-Value="_model.Password" Label="Password" Placeholder="@_placeholder" Disabled="@_disabled" AllowPasswordReveal="true" />
                    <TnTNumeric Icon="@_icon" @bind-Value="_model.Number" Label="Number" Placeholder="@_placeholder" Disabled="@_disabled" />
                    <TnTCheckbox Icon="@_icon" @bind-Value="_model.CheckBox" Label="Checkbox" Placeholder="@_placeholder" Disabled="@_disabled" />
                    <TnTCheckbox Icon="@_icon" @bind-Value="_model.CheckBox" Label="CheckboxWithLongLabel" Placeholder="@_placeholder" Disabled="@_disabled" />
                    <TnTSwitch Icon="@_icon" @bind-Value="_model.Switch" Label="Switch" Placeholder="@_placeholder" Disabled="@_disabled" />
                    <TnTSwitch Icon="@_icon" @bind-Value="_model.Switch" Label="SwitchWithLongLabel" Placeholder="@_placeholder" Disabled="@_disabled" />
                    <TnTDropDown Icon="@_icon" ListItems="@_listItems" @bind-Value="_model.DropDownItem" Label="DropDownItem" Placeholder="@_placeholder" Disabled="@_disabled" AllowClear="@_allowClear" />
                    <TnTDatePicker Icon="@_icon" @bind-Value="_model.DateValue" Label="DatePicker" Placeholder="@_placeholder" Disabled="@_disabled" AllowClear="@_allowClear" />
                    <TnTRadioGroup Icon="@_icon" @bind-Value="_model.RadioItem" Label="RadioButtons" Disabled="@_disabled" AllowClear="@_allowClear">
                        <RadioButtons>
                            <TnTRadioButton TInputType="int" Value="_radioItems.ElementAt(0)" Icon="@_icon" Label="Button1" Disabled="true" />
                            <TnTRadioButton TInputType="int" Value="_radioItems.ElementAt(1)" Icon="@_icon" Label="Button2" Disabled="false" />
                            <TnTRadioButton TInputType="int" Value="_radioItems.ElementAt(2)" Icon="@_icon" Label="Button3ReallyReallyReallyLongLabel" Disabled="@_disabled" />
                            <TnTRadioButton TInputType="int" Value="_radioItems.ElementAt(3)" Icon="@_icon" Label="Button4" Disabled="@_disabled" />
                            <TnTRadioButton TInputType="int" Value="_radioItems.ElementAt(4)" Icon="@_icon" Label="Button5" Disabled="@_disabled" />
                        </RadioButtons>
                    </TnTRadioGroup>

                    <button type="submit">
                        Submit
                    </button>
                </TnTForm>
            </TnTColumn>

            <TnTColumn S="12" L="6">
                <TnTButton Text="Toggle Disable" OnClick="@(() => _disabled = !_disabled)">
                </TnTButton>

                <TnTButton Text="Toggle Form Type" OnClick="@(() => RotateFormType())">

                </TnTButton>
                <TnTButton Text="Toggle Icon" OnClick="@(() => ToggleIcon())">
                </TnTButton>

                <TnTButton Text="Toggle Placeholder" OnClick="@(() => TogglePlaceholder())">
                </TnTButton>

                <TnTButton Text="Toggle AllowClear" OnClick="@(() => _allowClear = !_allowClear)">
                </TnTButton>
            </TnTColumn>
        </TnTRow>

        <div>
            @_model.Name
            @_model.Password
            @_model.Number
            @_model.CheckBox
            @_model.Switch
            @_model.DropDownItem
            @_model.DateValue
            @_model.RadioItem
        </div>
    </TnTBody>
</TnTLayout>

@code {
    private bool _dark = false;
    private bool _sideBarExpanded = false;
    private MyModel _model = new MyModel();

    private bool _disabled = false;
    private bool _allowClear = false;

    private FormType _formType = FormType.Underlined;

    private string _icon = string.Empty;

    private string _placeholder = string.Empty;

    private void RotateFormType() {
        switch (_formType) {
            case FormType.Underlined:
                _formType = FormType.Outlined;
                break;
            case FormType.Outlined:
                _formType = FormType.Filled;
                break;
            case FormType.Filled:
                _formType = FormType.Underlined;
                break;
        }

        StateHasChanged();
    }

    private ICollection<MyListItem> _listItems = default!;
    private ICollection<int> _radioItems = default!;

    private void ToggleIcon() {
        if (string.IsNullOrWhiteSpace(_icon)) {
            _icon = "search";
        }
        else {
            _icon = string.Empty;
        }
    }

    private void TogglePlaceholder() {
        if (string.IsNullOrWhiteSpace(_placeholder)) {
            _placeholder = "My Placeholder";
        }
        else {
            _placeholder = string.Empty;
        }
    }

    protected override void OnInitialized() {
        base.OnInitialized();
        _listItems = new List<MyListItem>();
        foreach (var i in Enumerable.Range(1, 100)) {
            _listItems.Add(new MyListItem() {
                    Str = $"Item # {i}",
                    Data = i
                });
        }

        _radioItems = Enumerable.Range(1, 5).ToList();
    }

    class MyModel {
        [Required]
        [StringLength(10)]
        public string Name { get; set; }
        [Required]
        [StringLength(10)]
        public string Password { get; set; }
        [Range(1, 15)]
        public int Number { get; set; }
        [Required]
        [Range(typeof(bool), "true", "true")]
        public bool CheckBox { get; set; }
        [Required]
        [Range(typeof(bool), "false", "false")]
        public bool Switch { get; set; }
        [Required]
        public MyListItem DropDownItem { get; set; }
        [Required]
        public DateOnly? DateValue { get; set; }
        [Required]
        public int? RadioItem { get; set; }
    }

    class MyListItem {
        public string Str;
        public int Data;

        public override string ToString() {
            return $"{Str} From To String";
        }
    }

    private void Submit(EditContext model) {
        int i = 0;
    }

    private void InvalidSubmit(EditContext errors) {
        var e = errors.GetValidationMessages()?.ToArray();
        int i = 0;
    }

    private void SideBarExpanded(bool expanded) {
        _sideBarExpanded = expanded;
    }
}