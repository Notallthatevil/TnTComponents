@page "/virtualizedGrid"
@using TnTComponents
@using TnTComponents.Extensions
@using TnTComponents.Grid
@rendermode InteractiveServer
@* <div style="height: 60vh; overflow-y:scroll">
    <TnTDataGrid ItemsProvider="@_provider" Virtualize="true" OnRowClicked="RowClicked" TGridItem="DataGridItem" DataGridAppearance="DataGridAppearance.Stripped" Resizable="true">
        <TnTPropertyColumn Property="@(x => x.Column1)" Sortable="true" />
        <TnTPropertyColumn Property="@(x => x.Column2)" Sortable="true" TextAlign="TextAlign.Center" HeaderAlignment="TextAlign.Left" />
        <TnTPropertyColumn Property="@(x => x.Column3)" Format="MM/yyyy" HeaderAlignment="TextAlign.Right" />
        <TnTTemplateColumn>
            <TnTButton OnClickCallback="() => ItemClicked(context)" Appearance="ButtonAppearance.Text" TextColor="TnTColor.OnSurface" BackgroundColor="TnTColor.Surface" StopPropagation="true">
                <MaterialIcon Icon="@MaterialIcon.Edit" />
                Edit
            </TnTButton>
        </TnTTemplateColumn>
    </TnTDataGrid>


</div>
 *@

@code {
    [Inject]
    private ITnTToastService _service { get; set; }

    private int _count;

    private IQueryable<DataGridItem>? Items;
    private static object _locker = new();
    private static List<DataGridItem> _items;
    private TnTGridItemsProvider<DataGridItem> _provider = default!;

    protected override Task OnInitializedAsync() {
        lock (_locker) {
            if (_items == null) {
                var list = new List<DataGridItem>();
                foreach (var i in Enumerable.Range(1, 1000)) {
                    list.Add(new DataGridItem() {
                            Column1 = Random.Shared.Next(1, 1000),
                            Column2 = Guid.NewGuid().ToString(),
                            Column3 = new DateTime(Random.Shared.Next(1, 10000), Random.Shared.Next(1, 13), Random.Shared.Next(1, 29))
                        });
                }
                _items = list;
            }
            Items = _items.AsQueryable();
        }

        _provider = async request => {
            await Task.Delay(1500);
            var items = Items.Apply(request);

            return new TnTComponents.Virtualization.TnTItemsProviderResult<DataGridItem>{
                    Items = items.ToList(),
                    TotalItemCount = Items.Count()
                };
        };

        return Task.CompletedTask;
    }

    private async Task RowClicked(DataGridItem item) {
        await _service.ShowAsync("Row clicked", item.Column1.ToString());
    }

    private async Task ItemClicked(DataGridItem item) {
        await _service.ShowAsync("Item clicked", item.Column2);
    }

    public class DataGridItem {

        public int Column1 { get; set; }

        public string Column2 { get; set; } = default!;

        public DateTime Column3 { get; set; }
    }


}