@page "/Buttons"
@using TnTComponents
@rendermode InteractiveAuto

<select @bind="Appearance">
    @foreach (var appearance in Enum.GetValues<ButtonAppearance>().Distinct()) {
        <option value="@appearance">@appearance</option>
    }
</select>

<select @bind="Shape">
    @foreach (var shape in Enum.GetValues<ButtonShape>().Distinct()) {
        <option value="@shape">@shape</option>
    }
</select>

<label>
    <input type="checkbox" @bind="Disabled" />
    Disabled
</label>

<label>
    <input type="checkbox" @bind="StartIcon" />
    Start Icon
</label>

<label>
    <input type="checkbox" @bind="EndIcon" />
    End Icon
</label>

<TnTDivider style="margin-top:36px;margin-bottom:36px;" />
<TnTRow>
    <TnTColumn S="12">
        <TnTButton ButtonSize="@Size.XS" Appearance="@Appearance" Shape="@Shape" Disabled="Disabled" TextColor="@(Appearance == ButtonAppearance.Filled || Appearance == ButtonAppearance.Elevated ? TnTColor.OnPrimary : TnTColor.OnSurface)">
            @if (StartIcon) {
                <MaterialIcon Icon="@MaterialIcon.CloudySnowing" />
            }
            Smallest
            @if (EndIcon) {
                <MaterialIcon Icon="@MaterialIcon.SunnySnowing" />
            }
        </TnTButton>

        <TnTButton ButtonSize="@Size.Small" Appearance="@Appearance" Shape="@Shape" Disabled="Disabled" TextColor="@(Appearance == ButtonAppearance.Filled || Appearance == ButtonAppearance.Elevated ? TnTColor.OnPrimary : TnTColor.OnSurface)">
            @if (StartIcon) {
                <MaterialIcon Icon="@MaterialIcon.CloudySnowing" />
            }
            Small
            @if (EndIcon) {
                <MaterialIcon Icon="@MaterialIcon.SunnySnowing" />
            }
        </TnTButton>

        <TnTButton ButtonSize="@Size.Medium" Appearance="@Appearance" Shape="@Shape" Disabled="Disabled" TextColor="@(Appearance == ButtonAppearance.Filled || Appearance == ButtonAppearance.Elevated ? TnTColor.OnPrimary : TnTColor.OnSurface)">
            @if (StartIcon) {
                <MaterialIcon Icon="@MaterialIcon.CloudySnowing" />
            }
            Medium
            @if (EndIcon) {
                <MaterialIcon Icon="@MaterialIcon.SunnySnowing" />
            }
        </TnTButton>

        <TnTButton ButtonSize="@Size.Large" Appearance="@Appearance" Shape="@Shape" Disabled="Disabled" TextColor="@(Appearance == ButtonAppearance.Filled || Appearance == ButtonAppearance.Elevated ? TnTColor.OnPrimary : TnTColor.OnSurface)">
            @if (StartIcon) {
                <MaterialIcon Icon="@MaterialIcon.CloudySnowing" />
            }
            Large
            @if (EndIcon) {
                <MaterialIcon Icon="@MaterialIcon.SunnySnowing" />
            }
        </TnTButton>

        <TnTButton ButtonSize="@Size.Largest" Appearance="@Appearance" Shape="@Shape" Disabled="Disabled" TextColor="@(Appearance == ButtonAppearance.Filled || Appearance == ButtonAppearance.Elevated ? TnTColor.OnPrimary : TnTColor.OnSurface)">
            @if (StartIcon) {
                <MaterialIcon Icon="@MaterialIcon.CloudySnowing" />
            }
            Largest
            @if (EndIcon) {
                <MaterialIcon Icon="@MaterialIcon.SunnySnowing" />
            }
        </TnTButton>
    </TnTColumn>
</TnTRow>


@code {


    private ButtonAppearance Appearance { get; set; } = ButtonAppearance.Filled;

    private ButtonShape Shape { get; set; } = ButtonShape.Round;

    private bool Disabled { get; set; }

    private bool StartIcon { get; set; }

    private bool EndIcon { get; set; }
}
