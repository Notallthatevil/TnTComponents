@using TnTComponents.Grid
@using LiveTest.Client.Data
@using TnTComponents.Grid.Columns
@using TnTComponents.Events
@using LiveTest.Client.Repositories
@inject IDataGridRepository _repo

<TnTDataGrid TGridItem="DataGridItem" Name="@Name" RowClickedCallback="@RowClicked">
    <TnTPropertyColumn Property="@((item) => item.Column1)" />
    <TnTPropertyColumn Property="@((item) => item.Column2)" />
    <TnTPropertyColumn Property="@((item) => item.Column3)" />
    <TnTPropertyColumn Property="@((item) => item.Column1)" ColumnHeader="Column 4" Format="D6" />
    <TnTPropertyColumn Property="@((item) => item.Column2)" ColumnHeader="Column 5" Format="Formatted {0}" />
    <TnTPropertyColumn Property="@((item) => item.Column3)" ColumnHeader="Column 6" Format="MMMM/dd/yyyy" />
    <TnTPropertyColumn Property="@((item) => item.Column1)" ColumnHeader="Column 7" />
    <TnTPropertyColumn Property="@((item) => item.Column2)" ColumnHeader="Column 8" DefaultSort="true" />
    <TnTPropertyColumn Property="@((item) => item.Column3)" ColumnHeader="Column 9" />
</TnTDataGrid>

@code {
    [Parameter]
    public string Name { get; set; } = default!;

    private TnTItemsProvider<DataGridItem> _itemsProvider;


    protected override void OnInitialized() {
        base.OnInitialized();
        _itemsProvider = async (request) => {
            return await _repo.Get(request);
        };

    }

    private void RowClicked(DataGridRowClickEventArgs arg) {
        var item = arg.Item as DataGridItem;
        Console.WriteLine($"Clicked row {item.Column2}");
    }
}
