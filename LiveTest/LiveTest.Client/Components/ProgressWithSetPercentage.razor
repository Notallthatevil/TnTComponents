@rendermode InteractiveAuto

<TnTComponents.ProgressIndicator Appearance="TnTComponents.Enum.ProgressAppearance.Ring" Max="100" Value="@_progressValue" />
<TnTComponents.ProgressIndicator Appearance="TnTComponents.Enum.ProgressAppearance.Linear" Max="100" Value="@_progressValue" />

@code {
    private int _progressValue = 0;
    private Task? _progressTask;
    private CancellationToken _cancellationToken;

    protected override void OnInitialized() {
        base.OnInitialized();

        if (_progressTask is null) {
            _progressTask = Task.Run(async () => {
                while (true) {
                    _progressValue++;
                    if (_progressValue > 100) {
                        _progressValue = 0;
                    }

                    await Task.Delay(500);
                    StateHasChanged();
                }
            }, _cancellationToken);
        }
    }

}